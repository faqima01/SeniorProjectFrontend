{"version":3,"sources":["components/About.jsx","components/App.js","components/Navbar.jsx","components/Landing.jsx","components/Categories.jsx","components/SignIn.jsx","components/CreateAccount.jsx","components/Profile.jsx","components/ForgotPassword.jsx","components/categories/Textbooks.jsx","components/categories/Misc.jsx","components/categories/Skill.jsx","components/categories/Transport.jsx","components/categories/LostAndFound.jsx","components/ResetPassword.jsx","serviceWorker.js","components/Slideshow.jsx","components/Home.jsx","index.js","components/images/campushare_logo.png","components/images/bell.png","components/images/AboutUs.png","components/categories/Listing.jsx"],"names":["About","className","src","require","alt","React","Component","getCookie","cname","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","global","customAuth","isAuthenticated","email","authenticate","staySignedIn","this","d","Date","sessionLength","console","log","setTime","getTime","toUTCString","signout","window","location","href","PrivateRoute","component","rest","render","props","to","pathname","state","from","App","path","exact","Categories","sectionTitle","LostAndFound","Listing","Misc","Skill","Transport","SignIn","CreateAccount","ForgotPassword","ResetPassword","Profile","NavBar","expand","sticky","xs","sm","md","lg","xl","Toggle","aria-controls","Collapse","id","Item","Link","Text","variant","size","onClick","disabled","backendURL","Landing","componentDidMount","fetchNotifications","a","fetch","method","headers","body","JSON","stringify","query","then","response","json","data","setState","requests","offers","sendMessage","notificationId","status","catch","error","dismissNotification","showModal","bind","map","request","show","onClose","key","notification_id","Header","offerer_email","Body","offer","requester_email","bcrypt","verifyLogin","event","preventDefault","refs","value","password","checked","selectAPI","process","REACT_APP_API_KEY","result","hash","compare","err","res","setTimeout","errMsg","onSubmit","Group","as","Row","controlId","Label","column","Control","type","ref","placeholder","required","Append","Feedback","span","offset","Check","label","verifyEmail","validEmail","savePassword","insertAPI","accountCreated","changePassword","newPassword","verifyPassword","hashSync","url","updateAPI","reset","message","s","m","readOnly","config","jwt","confirmAccountExists","norsekey","userEmail","userErrorMsg","object","accountExists","hashedPassword","serverErrorMsg","sendEmail","payload","secret","text","token","encode","templateParams","recipient","password_reset_link","thisURL","password_recovery","emailjs","send","REACT_APP_EMAILJS_USER_ID","emailSent","target","toLowerCase","onChange","handleChange","defaultValue","bucketName","dirName","region","accessKeyId","REACT_APP_S3_ACCESS_KEY_ID","secretAccessKey","REACT_APP_S3_SECRET_ACCESS_KEY","Textbooks","fetchBooks","deleteBook","book_id","deleteAPI","items","alert","fetchVolumeInfo","title","bookOptions","gbMsg","handleImageUpload","files","file","fileLocalLocation","URL","createObjectURL","handleModalClose","dataSent","fileS3URL","fileURL","uploadImage","handleModalShow","handleSubmit","replace","author","isbn","loan_start","loan_end","course","uploadToS3","image_url","populateFromGB","searchOption","volumeInfo","authors","join","industryIdentifiers","identifier","image","imageLinks","thumbnail","sendRequest","owner","bookID","S3FileUpload","uploadFile","header","loading","animation","cards","item","placement","popover","clickable","book_image","book_title","style","display","book_author","loanPeriod","modal","onHide","closeButton","Title","horizontal","bookOption","action","subtitle","publishedDate","accept","deleteItem","item_id","fetchItems","item_name","item_desc","item_img","saveToDB","fileLocation","loan_period","centered","categoryName","Prepend","rows","skill_id","fetchSkill","skill_title","skill_description","car_id","fetchCar","car_title","car_make","car_model","car_desintation","car_time","datetime_found","location_found","categoryDesc","form","getSecret","APIkey","resetPasswordSecret","validate","slice","decode","validated","showError","passwordSaved","url_parts","JWT","role","noValidate","Boolean","hostname","match","unregister","navigator","serviceWorker","ready","registration","ControlledCarousel","useState","index","setIndex","direction","setDirection","Carousel","activeIndex","onSelect","selectedIndex","e","Image","fluid","Home","exampleAPICallData","Button","ReactDOM","getElementById","module","exports","handleConfirmDeleteClose","showConfirmDelete","handleConfirmDeleteShow","tableName","requestItem","source_table"],"mappings":"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","file":"static/js/main.735939fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./styles/About.css\";\r\n\r\nclass About extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <img className=\"aboutUs\" src={require(\"./images/AboutUs.png\")} alt=\"About Us\"/>\r\n                <ul>\r\n                    <li>Luther students are able to connect with other Luther students and faculty</li>\r\n                    <li>Will help with textbook trading, transportation, etc.</li>\r\n                    <li>User friendly</li>\r\n                    <li>Come up with more</li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\";\r\n\r\n// Component Imports\r\nimport NavBar from \"./Navbar\";\r\n\r\n// Public Pages\r\nimport Landing from \"./Landing\";\r\nimport About from \"./About\";\r\nimport Categories from \"./Categories\";\r\nimport SignIn from \"./SignIn\";\r\nimport CreateAccount from \"./CreateAccount\";\r\n\r\n// Private Pages\r\nimport Home from \"./Home\";\r\nimport Profile from \"./Profile\";\r\nimport ForgotPassword from \"./ForgotPassword\";\r\n\r\n// Category Pages\r\nimport Textbooks from \"./categories/Textbooks\";\r\nimport Misc from \"./categories/Misc\";\r\nimport Skill from \"./categories/Skill\";\r\nimport Transport from \"./categories/Transport\";\r\nimport LostAndFound from \"./categories/LostAndFound\";\r\nimport Listing from \"./categories/Listing\";\r\nimport ResetPassword from './ResetPassword';\r\n\r\nimport './styles/App.css';\r\n\r\nconst getCookie = (cname) => {\r\n  let name = cname + \"=\";\r\n  let decodedCookie = decodeURIComponent(document.cookie);\r\n  let ca = decodedCookie.split(';');\r\n  for(let i = 0; i <ca.length; i++) {\r\n    let c = ca[i];\r\n    while (c.charAt(0) === ' ') {\r\n      c = c.substring(1);\r\n    }\r\n    if (c.indexOf(name) === 0) {\r\n      return c.substring(name.length, c.length);\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\n// TODO: Check if a user is logged in with JWTs\r\nglobal.customAuth = {\r\n  isAuthenticated: (getCookie(\"email\") !== \"\"),\r\n  email: getCookie(\"email\"),\r\n  authenticate(email, staySignedIn) {\r\n    this.email = email;\r\n    // Set expires to 24 hrs by default; add 14 days based on user selection later\r\n    let d = new Date();\r\n    let sessionLength = 24*60*60*1000;\r\n    if (staySignedIn) {\r\n      sessionLength *= 14;\r\n    }\r\n    console.log(sessionLength);\r\n    d.setTime(d.getTime() + sessionLength);\r\n    document.cookie = `email=${this.email}; expires=${d.toUTCString()}; path=/;`\r\n  },\r\n  signout() {\r\n    // Set to Past Date\r\n    let d = new Date();\r\n    d.setTime(d.getTime() - (24*60*60*1000));\r\n    document.cookie = `email=\"\"; expires=${d.toUTCString()}; path=/;`\r\n    window.location.href = \"/\";\r\n  }\r\n}\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => (\r\n  <Route {...rest} render={(props) => (\r\n    global.customAuth.isAuthenticated\r\n      ? <Component {...props} />\r\n      : <Redirect to={{\r\n          pathname: '/signin',\r\n          state: { from: props.location }\r\n       }} />\r\n  )} />\r\n)\r\n\r\n// App: main body of the page\r\nconst App = () => {\r\n\r\n  // Returns the App Instance\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        {/* Nav Bar -- on all pages */}\r\n        <NavBar />\r\n        <div className=\"element\">\r\n          {/* Renders the proper content based on route */}\r\n          <Switch>\r\n            {/* Routes to Landing or Home based on if a user is logged in */}\r\n            <Route path=\"/\" exact render={(props) => (\r\n              // The order of Landing and Home is opposite to what I would expect\r\n              // ...just rolling with it for now.\r\n              global.customAuth.isAuthenticated\r\n              ? <Landing />\r\n              : <Home {...props} />\r\n            )} />\r\n            <Route path=\"/categories\" component={Categories}/>\r\n            {/* Public Pages */}\r\n            <Route path=\"/about\" component={About}/>\r\n            <Route path=\"/textbooks\">\r\n              <Textbooks sectionTitle=\"Textbooks\" className=\"listing\" />\r\n            </Route>\r\n            <Route path=\"/about\" component={About} />\r\n            <Route path=\"/lostandfound\" component={LostAndFound} />\r\n            <Route path=\"/listing\" component={Listing} />\r\n            <Route path=\"/misc\" component={Misc} />\r\n            <Route path=\"/skill\" component={Skill} />\r\n            <Route path=\"/transport\" component={Transport} />\r\n            <Route path=\"/signin\" component={SignIn} />\r\n            <Route path=\"/createaccount\" component={CreateAccount} />\r\n            {/* Keep a logged-in user from accessing? */}\r\n            <Route path=\"/forgotpassword\" component={ForgotPassword} />\r\n            {/* Reset Password -- not logged in, but need a JSON Web Token to access */}\r\n            <Route path=\"/resetpassword/:email/:token\" component={ResetPassword} />\r\n            {/* Private Pages */}\r\n            <PrivateRoute path=\"/profile\" component={Profile} />\r\n          </Switch>\r\n        </div>\r\n        </Router>\r\n        <p className=\"footerMessage\">Candid Cheetah Co. &copy;2019-2020</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// src/components/NavBar.js\r\n\r\nimport React, { Fragment } from \"react\";\r\nimport { Button, Col, Nav, Navbar, Row } from \"react-bootstrap\";\r\n\r\nimport \"./styles/Navbar.css\";\r\n\r\nconst NavBar = () => {\r\n\r\n    return (\r\n        <Navbar className=\"App-navBar\" expand=\"lg\" sticky=\"top\">\r\n            <Row>\r\n                <Col xs={4} sm={4} md={2} lg={2} xl={2}>\r\n                    {/* For some reason, adding a link to the home page messes up the placement */}\r\n                    <a href=\"/\">\r\n                        <img src={require(\"./images/campushare_logo.png\")} className=\"logo\" alt=\"CampusShare Logo\"/>\r\n                    </a>\r\n                </Col>\r\n                <Col xs={0} sm={0} md={2} lg={2} xl={2}>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className=\"floatRight\" />\r\n                </Col>\r\n                <Col xs={12} sm={12} md={8} lg={8} xl={8}>\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        { global.customAuth.isAuthenticated\r\n                            ? (\r\n                                <Fragment>\r\n                                    <Nav className=\"mr-auto\">\r\n                                        <Nav.Item><Nav.Link href=\"/\">Home</Nav.Link></Nav.Item>\r\n                                        <Nav.Item><Nav.Link href=\"/categories\">Categories</Nav.Link></Nav.Item>\r\n                                    </Nav>\r\n                                    <Nav className=\"justify-content-end\">\r\n                                        <Nav.Item>\r\n                                            <Navbar.Text>\r\n                                                Signed in as: <a href=\"/profile\">{global.customAuth.email}</a>\r\n                                            </Navbar.Text>\r\n                                        </Nav.Item>\r\n                                        <Nav.Item>\r\n                                            <Button variant=\"outline-secondary\" size=\"sm\" className=\"btn-signOut\" onClick={global.customAuth.signout}>Sign Out</Button>\r\n                                        </Nav.Item>\r\n                                    </Nav>\r\n                                </Fragment>\r\n                            )\r\n                            : (\r\n                                <Fragment>\r\n                                    <Nav className=\"mr-auto\">\r\n                                        <Nav.Item><Nav.Link href=\"/\">Home</Nav.Link></Nav.Item>\r\n                                        <Nav.Item><Nav.Link href=\"/about\">About</Nav.Link></Nav.Item>\r\n                                        <Nav.Item><Nav.Link disabled >How does it work</Nav.Link></Nav.Item>\r\n                                        <Nav.Item><Nav.Link href=\"/categories\">Categories</Nav.Link></Nav.Item>\r\n                                    </Nav>\r\n                                    <Nav className=\"justify-content-end\">\r\n                                        <a href=\"/signin\"><Button variant=\"success\" size=\"sm\" className=\"btn-signIn\">Sign In</Button></a>\r\n                                    </Nav>\r\n                                </Fragment>\r\n                            )\r\n                        }\r\n                    </Navbar.Collapse>\r\n                </Col>\r\n            </Row>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import React, { Fragment } from 'react';\r\nimport { Button, Col, Toast } from 'react-bootstrap';\r\nimport \"./styles/Landing.css\";\r\n// import UserDetailsModal from './components/UserDetailsModal';\r\n\r\nconst backendURL = \"http://campus-share-backend.us-east-2.elasticbeanstalk.com\";\r\n\r\nclass Landing extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { showModal: false,\r\n                    //    userData: this.props.userData,\r\n                       requests: [],\r\n                       offers: []\r\n                     }\r\n        this.fetchNotifications = this.fetchNotifications.bind(this);\r\n        this.dismissNotification = this.dismissNotification.bind(this);\r\n    }\r\n\r\n    // Initial Notification Fetch\r\n    componentDidMount = () => {this.fetchNotifications()};\r\n\r\n    fetchNotifications = async () => {\r\n        // Populate Request Notifications\r\n        await fetch(`${backendURL}/query`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n                query: `SELECT * from Notifications WHERE requester_email=\"${global.customAuth.email}\" ORDER BY notification_id DESC`,\r\n            }), })\r\n            .then(response => response.json())\r\n            .then(data => this.setState({requests: data.data}));\r\n\r\n        // Populate Offer Notifications\r\n        await fetch(`${backendURL}/query`, {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify({\r\n                        query: `SELECT * from Notifications WHERE offerer_email=\"${global.customAuth.email}\" ORDER BY notification_id DESC`,\r\n                    }), })\r\n                    .then(response => response.json())\r\n                    .then(data => this.setState({offers: data.data}));\r\n    }\r\n\r\n    // Sends an approval or decline message (notification)\r\n    sendMessage = async (notificationId, status) => {\r\n        await fetch(`${backendURL}/query`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n                query: `UPDATE Notifications SET status = \"${status}\" WHERE notification_id = \"${notificationId}\"`,\r\n            })\r\n        })\r\n        .catch(error => {\r\n            console.error(error);\r\n        });\r\n        this.fetchNotifications();\r\n    }\r\n\r\n    // Dismisses a notification\r\n    // Either:\r\n    //   set that specific Toast component's display to none\r\n    //   mark as seen in DB?\r\n    dismissNotification = () => {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <div className=\"clearfix\">\r\n                    <img className=\"bell2\" src={require(\"./images/bell.png\")} alt=\"Luther Bell\"/>\r\n                    <h1 className=\"heading1\">Home</h1>\r\n                    <h3 className=\"heading3\">See updates here</h3>\r\n                </div>\r\n                <p>Notifications</p>\r\n                <div className=\"notifyCard\">\r\n                    <div className=\"notifyBorder\">\r\n                        {/* TODO: Populate the nofications from db notifications table */}\r\n                        <Col className='notifyCol'>\r\n                            <Fragment>\r\n                            {this.state.requests && (\r\n                                this.state.requests.map(request =>\r\n                                    <Toast show={true} onClose={this.dismissNotification} key={request.notification_id}>\r\n                                        <Toast.Header>\r\n                                            <strong className=\"mr-auto\">Request</strong>\r\n                                            <small>from {request.offerer_email}</small>\r\n                                        </Toast.Header>\r\n                                        <Toast.Body>\r\n                                            {/* Replace this with the message of the notification */}\r\n                                            <p>This request is {request.status}.</p>\r\n                                        </Toast.Body>\r\n                                    </Toast>\r\n                                )\r\n                            )}\r\n                            </Fragment>\r\n                            {this.state.offers && (\r\n                                this.state.offers.map(offer =>\r\n                                    <Toast show={true} onClose={this.dismissNotification} key={offer.notification_id}>\r\n                                        <Toast.Header>\r\n                                            <strong className=\"mr-auto\">Offer</strong>\r\n                                            <small>from {offer.requester_email}</small>\r\n                                        </Toast.Header>\r\n                                        <Toast.Body>\r\n                                            {/* TODO: Add info on the request! Join Tables on item_id -- do we need to save the table name in a notification entry then??? */}\r\n                                            { offer.status === \"pending\"\r\n                                              ? (\r\n                                                <Fragment>\r\n                                                    <p>Please approve or decline this request:</p>\r\n                                                    <Button variant=\"success\" size=\"sm\" onClick={() => this.sendMessage(offer.notification_id, \"accepted\")}>Approve</Button>\r\n                                                    <Button variant=\"danger\" size=\"sm\" onClick={() => this.sendMessage(offer.notification_id, \"declined\")}>Decline</Button>\r\n                                                </Fragment>\r\n                                                )\r\n                                              : (\r\n                                                <p>You have {offer.status} this request.</p>\r\n                                            )}    \r\n                                            </Toast.Body>\r\n                                    </Toast>\r\n                                )\r\n                            )}\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n                {/* TODO: Show UserDetails_Modal if user is newly added to DB (edit showModal value) */}\r\n                {/* <UserDetailsModal closePhrase=\"Later\" show={this.state.showModal} title=\"Add your details!\"/> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Landing;\r\n","import React from 'react';\r\nimport { Col, Container, Image, Nav, Row } from 'react-bootstrap';\r\n\r\nimport \"./styles/Categories.css\";\r\n\r\nclass Categories extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row className=\"row\">\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link disabled href=\"https://www.luther.edu/\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/clothing.png\" className=\"categoryImg\"/>\r\n                                <figcaption className=\"categoryFigcaption\">Clothing</figcaption>\r\n                            </figure>\r\n                        </Nav.Link> \r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link disabled href=\"categories\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/events.png\" className=\"categoryImg\"/> \r\n                                <figcaption className=\"categoryFigcaption\">Events</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link disabled href=\"categories\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/food.png\" className=\"categoryImg\"/>\r\n                                <figcaption className=\"categoryFigcaption\">Food</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link disabled href=\"categories\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/housing.png\" className=\"categoryImg\"/>\r\n                                <figcaption className=\"categoryFigcaption\">Housing</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link href=\"/lostandfound\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/lostfound.png\" className=\"categoryImg\"/> \r\n                                <figcaption className=\"categoryFigcaption\">Lost & Found</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link disabled href=\"https://www.xkcd.com/\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/meme.png\" className=\"categoryImg\"/> \r\n                                <figcaption className=\"categoryFigcaption\">Meme</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link disabled href=\"categories\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/mentor.png\" className=\"categoryImg\"/>\r\n                                <figcaption className=\"categoryFigcaption\">Mentorship</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link href=\"/misc\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/umbrella.png\" className=\"categoryImg\"/>\r\n                                <figcaption className=\"categoryFigcaption\">Misc.</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link disabled href=\"categories\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/opportunities.png\" className=\"categoryImg\"/>\r\n                                <figcaption className=\"categoryFigcaption\">Opportunities</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link disabled href=\"categories\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/projects.png\" className=\"categoryImg\"/>\r\n                                <figcaption className=\"categoryFigcaption\">Projects</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link href=\"skill\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/skills.png\" className=\"categoryImg\"/>\r\n                                <figcaption className=\"categoryFigcaption\">Skills</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link disabled href=\"categories\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/social.png\" className=\"categoryImg\"/>\r\n                                <figcaption className=\"categoryFigcaption\">Social</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link href=\"textbooks\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/textbooks.png\" className=\"categoryImg\"/>\r\n                                <figcaption className=\"categoryFigcaption\">Textbooks</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                    <Col xs={4} sm={3} md={3} lg={2} xl={3}>\r\n                        <Nav.Link href=\"transport\" className=\"nounderline\">\r\n                            <figure className=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/transportation.png\" className=\"categoryImg\"/>\r\n                                <figcaption className=\"categoryFigcaption\">Transportation</figcaption>\r\n                            </figure>\r\n                        </Nav.Link>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Categories;","import React from 'react';\r\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap';\r\nimport './styles/SignIn.css';\r\n\r\nconst bcrypt = require('bcryptjs');\r\n\r\nclass SignIn extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {errMsg: \"\"}\r\n        this.verifyLogin = this.verifyLogin.bind(this);\r\n    }\r\n\r\n    // Redirect to Home if User is Already Logged in\r\n    componentDidMount() { \r\n        if (global.customAuth.isAuthenticated) {\r\n            window.location.href = \"/\";\r\n        }\r\n        // DEVS: Use if you get locked out of your account like I did XD\r\n        // bcrypt.hash('Rockie', 10, function(err,hash){console.log(hash)});\r\n    }\r\n\r\n    // check email exists and password is correct\r\n    verifyLogin = async (event) => {\r\n        event.preventDefault(); // Page Reload\r\n        let email = `${this.refs.email.value}@luther.edu`;\r\n        let password = this.refs.password.value;\r\n        let staySignedIn = this.refs.staySignedIn.checked;\r\n        let result;\r\n        await fetch(`${global.selectAPI}table=Users&field=password&condition=email='${email}'`, {\r\n            method: \"GET\",\r\n            headers: { \"x-api-key\": process.env.REACT_APP_API_KEY},\r\n        }).then(response => response.json()\r\n        .then(response => result = response));\r\n        if (result.length > 0) {\r\n            let hash = result[0].password;\r\n            bcrypt.compare(password, hash, function(err, res) {\r\n                // res is true or false\r\n                if (res) {\r\n                    global.customAuth.authenticate(email, staySignedIn);\r\n                    window.location.href = \"/\"; // Replace with page that was last trying to be accessed?\r\n                }\r\n            });\r\n            // If Window has not redirected in quarter of a second, password was incorrect\r\n            setTimeout(() => { this.setState({errMsg: \"Incorrect Password\"}); }, 250);\r\n        } else {\r\n            // Alert User that Email was not found in the Database\r\n            this.setState({errMsg: \"No account exists with that email.\"})\r\n        }\r\n    }\r\n\r\n    // Render Form to take username & password\r\n    render() {\r\n        return (\r\n            <div className=\"row justify-content-center\">\r\n                <Col sm={12} md={8} lg={6}>\r\n                    <Form onSubmit={this.verifyLogin}>\r\n                        <Form.Group as={Row} controlId=\"validationUsername\">\r\n                            <Form.Label column sm={2}>Email</Form.Label>\r\n                            <Col sm={10} md={10} lg={10}>\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"text\" ref=\"email\" placeholder=\"norsekey\" required />\r\n                                        <InputGroup.Append>\r\n                                            <InputGroup.Text id=\"inputGroupAppend\">@luther.edu</InputGroup.Text>\r\n                                        </InputGroup.Append>\r\n                                    {/* Add @luther.edu ending */}\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                    Please use your valid luther.edu email.\r\n                                    </Form.Control.Feedback>\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"validationPassword\">\r\n                            <Form.Label column sm={2}>Password</Form.Label>\r\n                            <Col sm={10} md={10} lg={10}>                    \r\n                                <Form.Control type=\"password\" ref=\"password\" placeholder=\"Password\" />\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <p>{this.state.errMsg}</p>\r\n                        <Form.Group as={Row}>\r\n                            {/* Option for Resetting Password --> will need email functionality! */}\r\n                            <Col sm={{span: 10, offset:2}}>\r\n                                <a className=\"tinytext\" href=\"/forgotpassword\">Reset Password</a>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"staySignedIn\">\r\n                            {/* Option to stay signed in for 2 weeks */}\r\n                            <Col sm={{span: 10, offset:2}}>\r\n                                <Form.Check type=\"switch\" ref=\"staySignedIn\" label=\"Sign in for 2 weeks\"/>\r\n                                </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row}>\r\n                            <Col sm={{span: 10, offset:2}}>\r\n                                <Button variant=\"primary\" type=\"submit\">Sign In</Button>\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Col>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\r\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap';\r\n\r\nconst bcrypt = require('bcryptjs');\r\n\r\nclass CreateAccount extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { accountCreated: false,\r\n                       errMsg: null,\r\n                       validEmail: true }\r\n    };\r\n\r\n    // Verify email DNE in DB\r\n    verifyEmail = async () => {\r\n        let email = `${this.refs.email.value}@luther.edu`;\r\n        let password = `${this.refs.password.value}`;\r\n        await fetch(`${global.selectAPI}table=Users&field=*&condition=email='${email}'`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    'x-api-key': process.env.REACT_APP_API_KEY,\r\n                },\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => this.setState({validEmail: response.length === 0}))\r\n            .catch(err => console.log(err));\r\n        if (!this.state.validEmail) {\r\n            this.setState({errMsg: \"An account with this email already exists. Please sign in.\"})\r\n        } else {\r\n            this.savePassword(email, password);\r\n        }\r\n    }\r\n\r\n    // Add Password to DB\r\n    savePassword = async (email, password) => {\r\n        // Check that Password is valid\r\n        if (password !== '') {\r\n            // Hash Password\r\n            bcrypt.hash(password, 10, function(err, hash) {\r\n                fetch(`${global.insertAPI}table=Users&field=email,password&value='${email}','${hash}'`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        'x-api-key': process.env.REACT_APP_API_KEY,\r\n                    },\r\n                })\r\n                .then(response => response.json())\r\n                .then(response => console.log(response))\r\n                .catch(err => console.log(err));\r\n            });\r\n            this.setState({accountCreated: true})\r\n        } else {\r\n            this.setState({errMsg: \"Please provide a valid password\"});\r\n        }\r\n    }\r\n\r\n    // Render Form to take email, password, and user info\r\n    render() {\r\n        return (\r\n            <div className=\"row justify-content-center\">\r\n                <Col sm={12} md={10} lg={8}>\r\n                    <Form>\r\n                        <h3>Welcome to Campus Share!</h3>\r\n                        {/* <p>Please fill out the following information to enhance your experience.</p> */}\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label column sm={2}>Email</Form.Label>\r\n                        <Col sm={10} md={10} lg={10}>\r\n                            <InputGroup>\r\n                                <Form.Control type=\"text\" ref=\"email\" placeholder=\"norsekey\" required />\r\n                                    <InputGroup.Append>\r\n                                        <InputGroup.Text id=\"inputGroupAppend\">@luther.edu</InputGroup.Text>\r\n                                    </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"password\">\r\n                        <Form.Label column sm={2}>Password</Form.Label>\r\n                        <Col sm={10} md={10} lg={10}>                    \r\n                            <Form.Control type=\"password\" ref=\"password\" placeholder=\"Password\" />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <p>{this.state.errMsg}</p>\r\n                    {this.state.accountCreated && (\r\n                        <p>Account created! Please login here: <a href=\"/signin\">Sign In</a></p>\r\n                    )}\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{span: 10, offset:2}}>\r\n                            <Button variant=\"primary\" onClick={this.verifyEmail}>Create Account</Button>\r\n                        </Col>\r\n                    </Form.Group>     \r\n            </Form>\r\n                </Col>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateAccount;","import React, { Fragment } from \"react\"; //useState\r\nimport { Button, Col, Form } from \"react-bootstrap\"; // Modal\r\n\r\n// Custom Imports\r\nimport \"./styles/Profile.css\";\r\n\r\nconst bcrypt = require('bcryptjs');\r\n\r\nclass Profile extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { errMsg: null, reset: false }\r\n  }\r\n\r\n  changePassword = async () => {\r\n    let newPassword = this.refs.newPassword.value;\r\n    let verifyPassword = this.refs.verifyPassword.value;\r\n    if (newPassword) {\r\n      if (verifyPassword){\r\n        if (newPassword === verifyPassword) {\r\n          if (this.state.errMsg) {\r\n            this.setState({errMsg: null});\r\n          }\r\n          \r\n          // Encrypt newPassword\r\n          let hash = bcrypt.hashSync(newPassword, 10);\r\n          console.log(hash);\r\n\r\n          // Save to DB\r\n          let url = `${global.updateAPI}table=Users&field=password&value='${hash}'&condition=email='${global.customAuth.email}'`;\r\n          await fetch(url, {\r\n              method: 'GET',\r\n              headers: {\r\n                'x-api-key': process.env.REACT_APP_API_KEY,\r\n              }\r\n            })\r\n            .then(response => response.json())\r\n            .then(res => this.setState({reset: true}))\r\n            .catch(err => this.setState({errMsg: err.message}));\r\n\r\n          // Sign out and redirect to /signin?\r\n        } else {\r\n          this.setState({errMsg: \"Passwords do not match.\"})\r\n        }\r\n      } else {\r\n        this.setState({errMsg: \"Please retype your password.\"})\r\n      }\r\n    } else {\r\n      this.setState({errMsg: \"Please enter a password.\"})\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h1>Profile Page</h1>\r\n        <Col xs={12} s={12} m={8} lg={6} xl={6}>\r\n          <Form>\r\n            <Form.Group>\r\n              <Form.Control type=\"text\" readOnly value=\"Change Password\"/>\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>New Password</Form.Label>\r\n              <Form.Control required type=\"password\" ref=\"newPassword\" placeholder=\"Password\"/>\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Retype Password</Form.Label>\r\n              <Form.Control required type=\"password\" ref=\"verifyPassword\" placeholder=\"Retype Password\"/>\r\n            </Form.Group>\r\n            {this.state.reset && (<p>Password Reset! Please sign in: <a href=\"/signin\">Log in</a></p>)}\r\n            <p>{this.state.errMsg}</p>\r\n            <Button onClick={this.changePassword}>Change</Button>\r\n          </Form>\r\n        </Col>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Profile;","// Form to Send Email To Reset Password\r\nimport React from 'react';\r\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap';\r\nimport emailjs from 'emailjs-com';\r\n\r\nimport './styles/generic.css';\r\n\r\nrequire('dotenv').config()\r\nvar jwt = require('jwt-simple');\r\n\r\nclass ForgotPassword extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { accountExists: false,\r\n                       emailSent: false,\r\n                       hashedPassword: '',\r\n                       serverErrorMsg: '',\r\n                       userEmail: '',\r\n                       userErrorMsg: ''}\r\n    }\r\n\r\n    // Restrict user email entry to lowercase letters\r\n    handleChange(event) {this.setState({userEmail: event.target.value.toLowerCase()})};\r\n\r\n    // Verify Provided Email is associated with an Account\r\n    confirmAccountExists = async () => {\r\n        let norsekey = this.state.userEmail;\r\n        if (norsekey === '') {\r\n            this.setState({userErrorMsg: 'Norsekey is missing.'})\r\n        } else {\r\n            // Clear User Error Message\r\n            if (this.state.userErrorMsg) {\r\n                this.setState({userErrorMsg: ''})\r\n            }\r\n            // Query DB for email\r\n            let email = `${norsekey}@luther.edu`;\r\n            await fetch(`${global.selectAPI}table=Users&field=*&condition=email='${email}'`, {\r\n                method: 'GET',\r\n                headers: {'x-api-key': process.env.REACT_APP_API_KEY}\r\n            })\r\n            .then(response => response.json())\r\n            .then(object => this.setState({accountExists: (object.length > 0), hashedPassword: object[0].password}))\r\n            .catch(err => this.setState({serverErrorMsg: err.message}));\r\n            if (this.state.accountExists){\r\n                this.sendEmail(email);\r\n            }\r\n        }\r\n    }\r\n\r\n    // emailjs-com & jwt-simple\r\n    sendEmail = async (email) => {\r\n        if (this.state.accountExists) {\r\n            // Payload is NOT secure -- do not store password or JWT here!\r\n            let payload = { userEmail: email }\r\n            let d = new Date();\r\n            // Secret IS secure\r\n            let secret = `${this.state.hashedPassword}-${d.getTime()}`;\r\n            // Save secret to database for retrieval in ResetPassword\r\n            await fetch(`${global.insertAPI}table=Users&field=resetPasswordSecret&value='${secret}'`)\r\n                .catch(err => this.setState({serverErrorMsg: err.text}));\r\n            \r\n            // Set up email parameters with JWT-embedded link\r\n            let token = jwt.encode(payload, secret);\r\n            const templateParams = {\r\n                recipient: email,\r\n                password_reset_link: `${global.thisURL}/resetpassword/${payload.userEmail}/${token}`, // Update this with a generated JWT!\r\n                password_recovery: `${global.thisURL}/recoverpassword`\r\n            }\r\n            // Send Email\r\n            emailjs.send('gmail', 'password_recovery', templateParams, `'${process.env.REACT_APP_EMAILJS_USER_ID}'`)\r\n            .then((response) => {\r\n                // Show Success Message, Make sure Error Messages is Hidden\r\n                this.setState({emailSent: true, userErrorMsg: '', serverErrorMsg: ''});\r\n            }, (err) => {\r\n                this.setState({serverErrorMsg: err.text});\r\n            });\r\n        } else {\r\n            // Show Error, Hide Success\r\n            this.setState({userErrorMsg: 'No account exists with that email.', emailSent: false})\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Please enter your email to reset your password.</p>\r\n                <Form>\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label column xs={12} sm={12} md={1} lg={1} xl={1}>Email</Form.Label>\r\n                        <Col sm={6} md={6} lg={6}>\r\n                            <InputGroup>\r\n                                <Form.Control type=\"text\" ref=\"email\" value={this.state.userEmail} onChange={this.handleChange} placeholder=\"norsekey\" required />\r\n                                    <InputGroup.Append>\r\n                                        <InputGroup.Text id=\"inputGroupAppend\">@luther.edu</InputGroup.Text>\r\n                                    </InputGroup.Append>\r\n                            </InputGroup>\r\n\r\n                            {this.state.userErrorMsg && (\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"text\" className=\"errorMsg\" readOnly defaultValue={this.state.userErrorMsg}/>\r\n                                </InputGroup>\r\n                            )}\r\n                            {this.state.serverErrorMsg && (\r\n                                <div className=\"errorMsg\">\r\n                                    <p>Uff da! We've encountered the following error:</p>\r\n                                    <p>{this.state.serverErrorMsg}</p>\r\n                                    <p>Contact tech support here: <a href=\"mailto:hoffka04@luther.edu?Subject=Your%20App%20Is%20Busted\" target=\"_top\">hoffka04@luther.edu</a></p>\r\n                                </div>\r\n                            )}\r\n                            {this.state.emailSent && (\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"text\" className=\"successMsg\" readOnly defaultValue=\"Recovery email sent! Check your inbox for a link to reset your password.\"/>\r\n                                </InputGroup>\r\n                            )}\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" onClick={this.confirmAccountExists}>\r\n                        Send Recovery Email\r\n                    </Button>\r\n                </Form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ForgotPassword;","import React, { Fragment } from 'react';\r\nimport { Button, Col, Form, ListGroup, Modal, Row, Spinner } from 'react-bootstrap';\r\nimport { MDBPopover, MDBPopoverBody, MDBPopoverHeader, MDBBtn, MDBContainer } from \"mdbreact\";\r\nimport S3FileUpload from 'react-s3';\r\n\r\n// Custom imports\r\nimport './styles/Listing.css';\r\n\r\nconst config = {\r\n    bucketName: 'campus-share-files',\r\n    dirName: 'Textbooks',\r\n    region: 'us-east-2', // Ohio\r\n    accessKeyId: process.env.REACT_APP_S3_ACCESS_KEY_ID,\r\n    secretAccessKey: process.env.REACT_APP_S3_SECRET_ACCESS_KEY,\r\n};\r\n\r\nconst googleAPI = \"https://www.googleapis.com/books/v1/volumes\";\r\nconst GOOGLE_BOOKS_API_KEY = \"AIzaSyB5xY_lIKmpdwTI50kPz-UYiBDmyiSoc5M\";\r\n\r\n// Add objects parameter; list of lists (info for InfoCards)\r\nclass Textbooks extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // States set below: bookOptions, errMsg, file, fileURL, gbMsg\r\n        this.state = { dataSent: false, fileLocalLocation: '', fileS3URL: '', items: [], showModal: false, uploadImage: false }\r\n    };\r\n\r\n    componentDidMount = async () => {\r\n        await this.fetchBooks();\r\n    };\r\n\r\n    // Delete book from Database\r\n    deleteBook = async (book_id) => {\r\n        await fetch(`${global.deleteAPI}table=Textbooks&condition=book_id=${book_id}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'x-api-key': process.env.REACT_APP_API_KEY,\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .catch(err => console.log(err));\r\n        this.fetchBooks();\r\n    };\r\n\r\n    // fetchBooks: retrieves current listings from Textbooks table\r\n    fetchBooks = async () => {\r\n        let url = `${global.selectAPI}table=Textbooks&field=*`;\r\n        fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'x-api-key': process.env.REACT_APP_API_KEY,\r\n            }      \r\n        })\r\n        .then(response => response.json())\r\n        .then(json => this.setState({ items: json }))\r\n        .catch(err => alert(err));\r\n    };\r\n\r\n    // fetchVolumeInfo: on selection of author, populate ISBN & Photo about that volume\r\n    fetchVolumeInfo = async() => {\r\n        let title = this.refs.title.value;\r\n        if (title) {\r\n            // Get & Display the Volume's ISBN # and Picture\r\n            await fetch(`${googleAPI}?q=${title}&key=${GOOGLE_BOOKS_API_KEY}`)\r\n            .then(response => response.json())\r\n            .then(data => this.setState({ bookOptions: data.items }))\r\n            .then(this.setState({gbMsg: \"Please select a title below.\"}));\r\n        } else {\r\n            this.setState({gbMsg: \"Please enter a title before searching Google Books.\"});\r\n        }\r\n    };\r\n\r\n    // Set Proper States if a file is uploaded\r\n    handleImageUpload = (event) => {\r\n        if (event.target.files.length > 0) {\r\n            this.setState({file:event.target.files[0], fileLocalLocation: URL.createObjectURL(event.target.files[0])})\r\n        }\r\n    }\r\n\r\n    // Modal Functions \r\n    handleModalClose = () => {this.setState({showModal: false, dataSent: false, file: null, errMsg: null, fileLocalLocation: null, fileS3URL: null, fileURL: null, gbMsg: null, bookOptions: null, uploadImage: false})};\r\n    handleModalShow = () => {this.setState({showModal: true})};\r\n\r\n    // Sends book info from Add Listing Modal to DB & refreshes the component\r\n    handleSubmit = async (event) => {\r\n        let title = this.refs.title.value.replace(\"'\", \"\");\r\n        let author = this.refs.author.value.replace(\"'\", \"\");\r\n        let isbn = this.refs.isbn.value.replace(\"'\", \"\");\r\n        let loan_start = this.refs.loan_start.value;\r\n        let loan_end = this.refs.loan_end.value;\r\n        let course = this.refs.course.value.replace(\"'\", \"\");\r\n        // Check that the ref exists and title is not blank\r\n        if (!title) {\r\n            this.setState({errMsg: \"Please provide a title for this book\"});\r\n        } else if (!author) {\r\n            this.setState({errMsg: \"Please provide an author for this book\"});\r\n        } else if (!isbn) {\r\n            this.setState({errMsg: \"Please provide an ISBN number for this book (check copyright page)\"});\r\n        } else if (!loan_start) {\r\n            this.setState({errMsg: \"Please provide a loan start for this book\"});\r\n        } else if (loan_end && (loan_end < loan_start)) {\r\n            this.setState({errMsg: \"Please provide a valid loan end (currently set to before start)\"});\r\n        } else if (!course) {\r\n            this.setState({errMsg: \"Please provide a course name for this book\"})\r\n        } else if (this.state.uploadImage && !this.state.fileLocalLocation) {\r\n            this.setState({errMsg: \"Please upload an image of your book or autopopulate with Google Books\"});\r\n        } else {\r\n            this.setState({dataSent: true});\r\n            this.setState({errMsg: null});\r\n            let image_url;\r\n            if (this.state.file) {\r\n                await this.uploadToS3();\r\n                image_url = this.state.fileS3URL;\r\n            } else {\r\n                image_url = this.state.fileURL;\r\n            }\r\n\r\n            // Save to DB\r\n            let url = `${global.insertAPI}table=Textbooks&field=book_title,book_author,book_isbn,loan_start,loan_end,course,owner,book_image&value='${title}','${author}','${isbn}','${loan_start}','${loan_end}','${course}','${global.customAuth.email}','${image_url.replace(/&/g, 'AMPERSAND')}'`;\r\n            console.log(url);\r\n            await fetch(url, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'x-api-key': process.env.REACT_APP_API_KEY,\r\n                    }\r\n                })\r\n                .then(response => console.log(response))\r\n                .catch(err => this.setState({errMsg: err.message}));\r\n            \r\n            // Check for final Error Message\r\n            if (!this.state.errMsg) {\r\n                // Close Modal\r\n                this.handleModalClose();\r\n                // Update View\r\n                this.fetchBooks();\r\n            }\r\n        }\r\n    }\r\n\r\n    // User Selects Search Option\r\n    // populateFromGB: populate ref fields with search result\r\n    populateFromGB = async (searchOption) => {\r\n        //id\r\n        //volumeInfo\r\n          //title\r\n          //subtitle?\r\n          //authors\r\n          //industryIdentifiers\r\n            //type (ISBN_10, ISBN_13, OTHER)\r\n          //imageLinks\r\n            //thumbnail\r\n        \r\n        // Set Ref Values\r\n        this.refs.title.value = searchOption.volumeInfo.title;\r\n        this.refs.author.value = searchOption.volumeInfo.authors.join(', ');\r\n        let isbn = null;\r\n        for (let identifier of searchOption.volumeInfo.industryIdentifiers) {\r\n            if (identifier.type === \"ISBN_13\") {\r\n                isbn = identifier.identifier;\r\n            }\r\n        }\r\n        this.refs.isbn.value = (isbn || \"XXX-X-XXX-XXXXX-X\")\r\n        let image = searchOption.volumeInfo.imageLinks.thumbnail;\r\n        this.setState({fileURL: image});\r\n    }\r\n\r\n    // TODO: Edit this with new request/notification system (Massi's wheelhouse)\r\n    sendRequest = async (owner, bookID) => {\r\n        if (owner !== global.customAuth.email) {\r\n            let response = await fetch(`${global.backendURL}/query`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    query: `INSERT INTO Notifications (requester_email, offerer_email, item_id, source_table) VALUES (\"${global.customAuth.email}\", \"${owner}\", \"${bookID}\", \"Textbooks\");`,\r\n                })\r\n            })\r\n            if (response.status !== 200) {\r\n                alert(\"Uff da! Something went wrong, please try again.\");\r\n            } else {\r\n                alert(\"Request successfully sent!\")\r\n            }\r\n            console.log(response);\r\n        } else {\r\n            alert(\"You are the owner of this title. Please look for another title.\")\r\n        }\r\n    }\r\n\r\n    uploadToS3 = async () => {\r\n        await S3FileUpload.uploadFile(this.state.file, config)\r\n        .then(data => this.setState({fileS3URL: data.location}))\r\n        .catch(err => this.setState({errMsg: err.message}));\r\n    }\r\n\r\n   \r\n    render() {\r\n        let header = (\r\n            <Row>\r\n                <h1 className=\"categoryName\">{this.props.sectionTitle}</h1>\r\n                {global.customAuth.isAuthenticated && (\r\n                    <Button onClick={this.handleModalShow}>Add Listing</Button>\r\n                )}\r\n            </Row>\r\n        );\r\n\r\n        let loading = (\r\n            <Fragment>\r\n                &nbsp;\r\n                <Spinner animation=\"border\" size=\"md\"/>\r\n                &nbsp;Loading...\r\n            </Fragment>\r\n        );\r\n\r\n        let cards = (\r\n            <MDBContainer>\r\n                <Row className=\"mdbpopoverDiv\">\r\n                    {this.state.items.map(item =>\r\n                        <MDBPopover\r\n                            placement=\"bottom\"\r\n                            popover\r\n                            clickable\r\n                            key={item.book_id}\r\n                            className=\"mdbpopover\"\r\n                        >\r\n                            <MDBBtn className=\"listingBtn\">\r\n                                <figure className=\"floatLeft\">\r\n                                    <img className=\"listingImg\" src={item.book_image.replace(/AMPERSAND/g, '&')||\"https://cdn0.iconfinder.com/data/icons/reading-5/384/Generic_book_file_type-512.png\"} alt=\"Thumbnail\"/>\r\n                                    <figcaption>{item.book_title}</figcaption>\r\n                                </figure>\r\n                            </MDBBtn>\r\n                            <div>\r\n                                <MDBPopoverHeader>{item.book_title}</MDBPopoverHeader>\r\n                                <MDBPopoverBody>\r\n                                    <p style={{display:\"none\"}} ref=\"bookID\">{item.book_id}</p>\r\n                                    <p className=\"p\">{item.book_author}</p>\r\n                                    <p className=\"p\">{item.course}</p>\r\n                                    <p className=\"p\">{item.loanPeriod}</p>\r\n                                    { global.customAuth.email !== \"\" &&\r\n                                        ( item.owner !== global.customAuth.email\r\n                                            ? <Fragment>\r\n                                                <p className=\"p\" ref=\"owner\">{item.owner}</p>\r\n                                                <Button variant=\"success\" size=\"sm\" onClick={() => this.sendRequest(item.owner, item.book_id)}>Request</Button>\r\n                                                </Fragment>\r\n                                            : <Button variant=\"danger\" size=\"sm\" onClick={() => this.deleteBook(item.book_id)}>Delete</Button>\r\n                                        )\r\n                                    }\r\n                                </MDBPopoverBody>\r\n                            </div>\r\n                        </MDBPopover>\r\n                    )}\r\n                </Row>\r\n            </MDBContainer>\r\n        );\r\n\r\n        let modal = (\r\n            <Modal size=\"xl\" show={this.state.showModal} onHide={this.handleModalClose}>\r\n                <Modal.Header closeButton>\r\n                    {/* Change to Dropdown of possible listing categories? */}\r\n                    <Modal.Title>Add a listing to {this.props.sectionTitle}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Label>Title</Form.Label>\r\n                        <Form.Control type=\"text\" ref=\"title\" placeholder=\"Enter Title Here\" />\r\n                        {/* version 1: click button to search for volume info */}\r\n                        <Button variant=\"outline-secondary\" onClick={this.fetchVolumeInfo}>\r\n                            Autopopulate with Google Books\r\n                        </Button>\r\n                        <p>{this.state.gbMsg}</p>\r\n                        {/* TODO: Make this search more visual & clear! (Change from SELECT) */}\r\n                        {this.state.bookOptions && (\r\n                            <Form.Group controlId=\"titleSelect\">\r\n                                <Form.Label>Select title</Form.Label>\r\n                                <ListGroup horizontal className=\"horizontalScroll\">\r\n                                    {this.state.bookOptions !== null && this.state.bookOptions.map(bookOption =>\r\n                                        <ListGroup.Item action onClick={(event) => {event.preventDefault(); this.populateFromGB(bookOption)}} id={bookOption.id} key={bookOption.id}>\r\n                                            <div>\r\n                                                <p>{bookOption.volumeInfo.title || \"Title Not Listed\"}</p>\r\n                                                <p>{bookOption.volumeInfo.subtitle || \"\"}</p>\r\n                                                {bookOption.volumeInfo.imageLinks\r\n                                                  ? <img src={bookOption.volumeInfo.imageLinks.thumbnail} alt={bookOption.id}/>\r\n                                                  : <img src=\"https://cdn0.iconfinder.com/data/icons/reading-5/384/Generic_book_file_type-512.png\" className=\"uploadPreview\" alt={bookOption.id}/>\r\n                                                }\r\n                                                {bookOption.volumeInfo.authors\r\n                                                  ? <p>{bookOption.volumeInfo.authors.join(', ')}</p>\r\n                                                  : <p>Author Not Listed</p>\r\n                                                }\r\n                                                <p>&copy;{bookOption.volumeInfo.publishedDate || \"Publishing Date Not Listed\"}</p>\r\n                                            </div>\r\n                                        </ListGroup.Item>\r\n                                    )}\r\n                                </ListGroup>\r\n                        </Form.Group>\r\n                        )}\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Author</Form.Label>\r\n                                    <Form.Control type=\"text\" ref=\"author\"/>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>ISBN</Form.Label>\r\n                                    <Form.Control type=\"text\" ref=\"isbn\" placeholder=\"XXX-X-XXX-XXXXX-X\"/>\r\n                                </Form.Group>\r\n                                {this.state.uploadImage\r\n                                  ? <Fragment>\r\n                                        <Form.Group>\r\n                                            <Form.Label>Image</Form.Label>\r\n                                            <Form.Control type=\"file\" required={false} onChange={this.handleImageUpload} accept=\"image/gif, image/jpeg, image/png\"/>\r\n                                            {this.state.fileLocalLocation !== null && (<img src={this.state.fileLocalLocation} alt=\"\" className=\"uploadPreview\"/>)}\r\n                                        </Form.Group>\r\n                                        <Button onClick={() => {this.setState({uploadImage: false, file: null, fileLocalLocation: null})}}>Cancel</Button>\r\n                                    </Fragment>\r\n                                  : <Button onClick={() => {this.setState({uploadImage: true})}}>Upload Custom Image</Button>\r\n                                }\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Loan Start</Form.Label>\r\n                                    <Form.Control type=\"date\" ref=\"loan_start\"/>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>Loan End (Optional)</Form.Label>\r\n                                    <Form.Control type=\"date\" ref=\"loan_end\"/>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>Course</Form.Label>\r\n                                    <Form.Control type=\"text\" ref=\"course\"/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <p>{this.state.errMsg}</p>\r\n                        {this.state.dataSent\r\n                          ? <Fragment><Spinner/><p>Adding Listing...</p></Fragment>\r\n                          : <Button variant=\"success\" onClick={this.handleSubmit}>\r\n                                Submit\r\n                            </Button>\r\n                        }\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n\r\n        return (\r\n            <Fragment>\r\n                {header}\r\n                <p className=\"categoryDesc\">Care to share or borrow a book?</p>\r\n                <Row>\r\n                    {typeof this.state.items === \"undefined\"\r\n                     ? loading\r\n                     : cards\r\n                    }\r\n                </Row>\r\n                {modal}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Textbooks;\r\n","import React, { Fragment } from 'react';\r\nimport { Button, Col, Form, InputGroup, Modal, Row, Spinner } from 'react-bootstrap';\r\nimport { MDBPopover, MDBPopoverBody, MDBPopoverHeader, MDBBtn } from \"mdbreact\";\r\nimport S3FileUpload from 'react-s3';\r\n\r\nimport './styles/Listing.css';\r\n\r\nconst config = {\r\n    bucketName: 'campus-share-files',\r\n    dirName: 'Misc',\r\n    region: 'us-east-2', // Ohio\r\n    accessKeyId: process.env.REACT_APP_S3_ACCESS_KEY_ID,\r\n    secretAccessKey: process.env.REACT_APP_S3_SECRET_ACCESS_KEY,\r\n};\r\n\r\nclass Misc extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { errMsg: null,\r\n                       file: null,\r\n                       fileLocation: null,\r\n                       fileURL: null,\r\n                       items: null,\r\n                       showModal: false}\r\n        this.fetchItems = this.fetchItems.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        // this.deleteItem = this.deleteItem.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n        // this.sendRequest = this.sendRequest.bind(this);\r\n    };\r\n\r\n    componentDidMount(){this.fetchItems();}\r\n\r\n    deleteItem = async (item_id) => {\r\n        await fetch(`${global.deleteAPI}table=Misc&condition=item_id=${item_id}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'x-api-key': process.env.REACT_APP_API_KEY,\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .catch(err => console.log(err));\r\n        this.fetchItems();\r\n    };\r\n\r\n    // fetchItems: retrieves current listings from Misc table\r\n    fetchItems = async () => {\r\n        await fetch(`${global.selectAPI}table=Misc&field=*`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'x-api-key': process.env.REACT_APP_API_KEY,\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(object => this.setState({ items: object }));\r\n    };\r\n\r\n    handleImageUpload = (event) => {\r\n        if (event.target.files.length > 0) {\r\n            this.setState({file:event.target.files[0], fileURL: URL.createObjectURL(event.target.files[0])})\r\n        }\r\n    }\r\n\r\n    // Modal Functions\r\n    handleModalClose = () => {this.setState({showModal: false, file: null})};\r\n    handleModalShow = () => {this.setState({showModal: true})};\r\n    \r\n    handleSubmit = async () => {\r\n        let item_name = this.refs.item_name.value;\r\n        let item_desc = this.refs.item_desc.value;\r\n        let item_img = this.state.fileURL;\r\n        let loan_start = this.refs.loan_start.value;\r\n        let loan_end = this.refs.loan_end.value;\r\n        if (!item_name) {\r\n            this.setState({errMsg: \"Please provide a name for this item\"});\r\n        } else if (!item_desc) {\r\n            this.setState({errMsg: \"Please provide a description for this item\"});\r\n        } else if (!item_img) {\r\n            this.setState({errMsg: \"Please provide an image for this item\"});\r\n        } else if (!loan_start) {\r\n            this.setState({errMsg: \"Please provide a loan start for this item\"});\r\n        } else if (loan_end && (loan_end < loan_start)) {\r\n            this.setState({errMsg: \"Please provide a valid loan end (currently set to before start)\"});\r\n        } else {\r\n            this.setState({errMsg: null});\r\n            // Upload to S3\r\n            await this.uploadToS3();\r\n    \r\n            if (!this.state.errMsg) {\r\n                // Save to DB\r\n                await this.saveToDB(item_name, item_desc, this.state.fileLocation, loan_start, loan_end);\r\n                \r\n                // Update View of Item Listings\r\n                this.fetchItems();\r\n\r\n                // Lastly, close the modal\r\n                this.handleModalClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    saveToDB = async(item_name, item_desc, item_img, loan_start, loan_end) => {\r\n        let url = `${global.insertAPI}table=Misc&field=item_name,item_desc,item_img,loan_start,loan_end,owner&value='${item_name}','${item_desc}','${item_img}','${loan_start}','${loan_end}','${global.customAuth.email}'`;\r\n        await fetch(url, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'x-api-key': process.env.REACT_APP_API_KEY,\r\n                    }\r\n                })\r\n                .then(response => console.log(response))\r\n                .catch(err => console.log(err));\r\n    }\r\n\r\n    uploadToS3 = async () => {\r\n        await S3FileUpload.uploadFile(this.state.file, config)\r\n        .then(data => this.setState({fileLocation: data.location}))\r\n        .catch(err => this.setState({errMsg: err}));\r\n    }\r\n\r\n\r\n    // sendRequest -> needs ID of item & source table\r\n\r\n    // Render Page\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Col xs={8} sm={8} md={10} lg={10} xl={10}>\r\n                        <h1 className=\"categoryName\">Misc</h1>\r\n                    </Col>\r\n                    <Col className=\"justify-content-md-end\">\r\n                        {/* Add Listing Button - Only shown if current user is logged in */}\r\n                        { global.customAuth.isAuthenticated && (\r\n                            <Button onClick={this.handleModalShow}>Add Listing</Button>\r\n                            )}\r\n                    </Col>\r\n                </Row>\r\n                <p className=\"categoryDesc\">mi-sə-ˈlā-nē-əs: consisting of many things of different sorts</p>\r\n        \r\n                {!this.state.items\r\n                // No items have been fetched yet\r\n                ? (\r\n                    <Row>\r\n                        <Spinner animation=\"grow\" size=\"sm\" />\r\n                        <p>Loading...</p>\r\n                    </Row>\r\n                )\r\n                : (\r\n                    <Fragment>\r\n                        {this.state.items.length === 0\r\n                         ? // No items exist\r\n                            (<p>No items to display!</p>)\r\n                         : // Render Items\r\n                            <Fragment>\r\n                                {this.state.items.map(item => \r\n                                    <MDBPopover\r\n                                            placement=\"bottom\"\r\n                                            popover\r\n                                            clickable\r\n                                            key={item.item_id}\r\n                                            className=\"mdbpopover\"\r\n                                        >\r\n                                            <MDBBtn className=\"listingBtn\">\r\n                                                <figure className=\"floatLeft\">\r\n                                                    <img className=\"listingImg\" src={item.item_img||\"https://cdn1.iconfinder.com/data/icons/image-manipulations/100/13-512.png\"} alt={item.item_name}/>\r\n                                                    <figcaption>{item.item_name}</figcaption>\r\n                                                </figure>\r\n                                            </MDBBtn>\r\n                                            <div>\r\n                                                <MDBPopoverHeader>{item.item_name}</MDBPopoverHeader>\r\n                                                <MDBPopoverBody>\r\n                                                    <p style={{display:\"none\"}} ref=\"itemID\">{item.item_id}</p>\r\n                                                    <p className=\"p\">{item.item_desc}</p>\r\n                                                    <p className=\"p\">{item.loan_period}</p>\r\n                                                    {global.customAuth.email !== '' && (\r\n                                                        <Fragment>\r\n                                                            {item.owner === global.customAuth.email\r\n                                                            ? <Fragment>\r\n                                                                <Button variant=\"danger\" size=\"sm\" onClick={() => this.deleteItem(item.item_id)}>Delete</Button>\r\n                                                            </Fragment>\r\n                                                            : <Fragment>\r\n                                                                <p className=\"p\" ref=\"owner\">{item.owner}</p>\r\n                                                                <Button variant=\"success\" size=\"sm\" onClick={() => this.sendRequest(item.owner, item.item_id)}>Request</Button>\r\n                                                            </Fragment>\r\n                                                            }\r\n                                                        </Fragment>\r\n                                                    )}\r\n                                                </MDBPopoverBody>\r\n                                            </div>\r\n                                        </MDBPopover>\r\n                                )}\r\n                            </Fragment>\r\n                        }\r\n                    </Fragment>\r\n                )}\r\n                {/* Add Listing Modal */}\r\n                <Modal show={this.state.showModal} onHide={this.handleModalClose} centered size=\"lg\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add a new listing to the {this.props.categoryName} Category</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Col>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend><InputGroup.Text>Item Name</InputGroup.Text></InputGroup.Prepend>\r\n                                <Form.Control type=\"text\" ref=\"item_name\" placeholder=\"Enter Name Here\" />\r\n                            </InputGroup>\r\n                            <Form.Group as={Row}>\r\n                                <Form.Label column sm={3}>Description:</Form.Label>\r\n                                <Col sm={9}>\r\n                                    <Form.Control as=\"textarea\" rows=\"3\" ref=\"item_desc\" placeholder=\"Please describe your item here\" />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>Image Upload</p>\r\n                            <input type=\"file\" onChange={this.handleImageUpload} accept=\"image/gif, image/jpeg, image/png\"/>\r\n                            {this.state.fileURL !== null && (<img src={this.state.fileURL} alt=\"\" className=\"uploadPreview\"/>)}\r\n                            \r\n                            {/* Loan Period -- Start Date & Time to End Date & Time? \"Any\" Option? Permanent? */}\r\n                            <p>Loan Period (Loan Start Required)</p>\r\n                            <input type=\"date\" ref=\"loan_start\"/>\r\n                            <input type=\"date\" ref=\"loan_end\"/>\r\n                        </Col>\r\n\r\n                        <p>{this.state.errMsg}</p>\r\n\r\n                        <Row className=\"bottomRow\">\r\n                            <Col xs={12} sm={12} md={3} lg={3} xl={3}>\r\n                                <Button className=\"btn-submit\" variant=\"success\" onClick={this.handleSubmit}>Add Listing</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Misc;\r\n","import React, { Fragment } from 'react';\r\nimport { Button, InputGroup, Form, Row, Col, Modal, Spinner } from 'react-bootstrap';\r\nimport { MDBPopover, MDBPopoverBody, MDBPopoverHeader, MDBBtn } from \"mdbreact\";\r\n\r\nclass Skill extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { errMsg: null,\r\n                       items: null,\r\n                       showModal: false}\r\n        this.fetchSkill = this.fetchSkill.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        // this.deleteItem = this.deleteItem.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n        // this.sendRequest = this.sendRequest.bind(this);\r\n    };\r\n    // componentWillMount \r\n\r\n    componentDidMount(){this.fetchSkill();}\r\n\r\n    deleteItem = async (skill_id) => {\r\n        await fetch(`${global.deleteAPI}table=Skill&condition=skill_id=${skill_id}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'x-api-key': process.env.REACT_APP_API_KEY,\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .catch(err => console.log(err));\r\n        this.fetchItems();\r\n    };\r\n\r\n    // fetchSkill: retrieves current listings from Transport table\r\n    fetchSkill = async () => {\r\n        await fetch(`${global.selectAPI}table=Skill&field=*`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'x-api-key': process.env.REACT_APP_API_KEY,\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(object => this.setState({ items: object }));\r\n    };\r\n\r\n    handleModalClose = () => {this.setState({showModal: false, file: null})};\r\n    handleModalShow = () => {this.setState({showModal: true})};\r\n\r\n    handleSubmit = async () => {\r\n        let skill_title = this.refs.skill_title.value;\r\n        let skill_description = this.refs.skill_description.value;\r\n        if (!skill_title) {\r\n            this.setState({errMsg: \"Please provide a title for this item\"});\r\n        } else if (!skill_description) {\r\n            this.setState({errMsg: \"Please provide a description for this item\"});\r\n        } else {\r\n            this.setState({errMsg: null});\r\n    \r\n            if (!this.state.errMsg) {\r\n                // Save to DB\r\n                await this.saveToDB(skill_title, skill_description);\r\n                \r\n                // Update View of Item Listings\r\n                this.fetchSkill();\r\n\r\n                // Lastly, close the modal\r\n                this.handleModalClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    // handleSubmit: sends book info from Add Listing Modal to DB & refreshes the component\r\n\r\n    // sendRequest = async (owner, bookID) => {\r\n    //     if (owner !== global.customAuth.email) {\r\n    //         let rv = await fetch(`${global.backendURL}/query`, {\r\n    //             method: \"POST\",\r\n    //             headers: { \"Content-Type\": \"application/json\"},\r\n    //             body: JSON.stringify({\r\n    //                 query: `INSERT INTO Notifications (requester_email, offerer_email, item_id) VALUES (\"${this.state.user.email}\", \"${owner}\", \"${bookID}\");`,\r\n    //             })\r\n    //         })\r\n    //         if (rv.status !== 200) {\r\n    //             alert(\"Uff da! Something went wrong, please try again.\");\r\n    //         } else {\r\n    //             alert(\"Request successfully sent!\")\r\n    //         }\r\n    //         console.log(rv);\r\n    //     } else {\r\n    //         alert(\"You are the owner of this title. Please look for another title.\")\r\n    //     }\r\n    // }\r\n\r\n    saveToDB = async(skill_title, skill_description) => {\r\n        let url = `${global.insertAPI}table=Skill&field=skill_title,skill_description,owner&value='${skill_title}','${skill_description}',${global.customAuth.email}'`;\r\n        await fetch(url, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'x-api-key': process.env.REACT_APP_API_KEY,\r\n                    }\r\n                })\r\n                .then(response => console.log(response))\r\n                .catch(err => console.log(err));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Col xs={8} sm={8} md={10} lg={10} xl={10}>\r\n                        <h1 className=\"categoryName\">Skill</h1>\r\n                    </Col>\r\n                    <Col className=\"justify-content-md-end\">\r\n                        {/* Add Listing Button - Only shown if current user is logged in */}\r\n                        { global.customAuth.isAuthenticated && (\r\n                            <Button onClick={this.handleModalShow}>Add Listing</Button>\r\n                            )}\r\n                    </Col>\r\n                </Row>\r\n                <p className=\"categoryDesc\">Care to share a skill?</p>\r\n        \r\n                {!this.state.items\r\n                // No items have been fetched yet\r\n                ? (\r\n                    <Row>\r\n                        <Spinner animation=\"grow\" size=\"sm\" />\r\n                        <p>Loading...</p>\r\n                    </Row>\r\n                )\r\n                : (\r\n                    <Fragment>\r\n                        {this.state.items.length === 0\r\n                         ? // No items exist\r\n                            (<p>No items to display!</p>)\r\n                         : // Render Items\r\n                            <Fragment>\r\n                                {this.state.items.map(item => \r\n                                    <MDBPopover\r\n                                            placement=\"bottom\"\r\n                                            popover\r\n                                            clickable\r\n                                            key={item.skill_id}\r\n                                            className=\"mdbpopover\"\r\n                                        >\r\n                                            <MDBBtn className=\"listingBtn\">\r\n                                                <figure className=\"floatLeft\">\r\n                                                    {/* <img className=\"listingImg\" src={item.item_img||\"https://cdn1.iconfinder.com/data/icons/image-manipulations/100/13-512.png\"} alt={item.item_name}/> */}\r\n                                                    <figcaption>{item.skill_title}</figcaption>\r\n                                                </figure>\r\n                                            </MDBBtn>\r\n                                            <div>\r\n                                                <MDBPopoverHeader>{item.skill_title}</MDBPopoverHeader>\r\n                                                <MDBPopoverBody>\r\n                                                    <p style={{display:\"none\"}} ref=\"itemID\">{item.skill_id}</p>\r\n                                                    <p className=\"p\">{item.skill_title}</p>\r\n                                                    <p className=\"p\">{item.skill_description}</p>\r\n                                                    {global.customAuth.email !== '' && (\r\n                                                        <Fragment>\r\n                                                            {item.owner === global.customAuth.email\r\n                                                            ? <Fragment>\r\n                                                                <Button variant=\"danger\" size=\"sm\" onClick={() => this.deleteItem(item.skill_id)}>Delete</Button>\r\n                                                            </Fragment>\r\n                                                            : <Fragment>\r\n                                                                <p className=\"p\" ref=\"owner\">{item.owner}</p>\r\n                                                                <Button variant=\"success\" size=\"sm\" onClick={() => this.sendRequest(item.owner, item.skill_id)}>Request</Button>\r\n                                                            </Fragment>\r\n                                                            }\r\n                                                        </Fragment>\r\n                                                    )}\r\n                                                </MDBPopoverBody>\r\n                                            </div>\r\n                                        </MDBPopover>\r\n                                )}\r\n                            </Fragment>\r\n                        }\r\n                    </Fragment>\r\n                )}\r\n                {/* Add Listing Modal */}\r\n                <Modal show={this.state.showModal} onHide={this.handleModalClose} centered size=\"lg\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add a new listing to the Skills Category</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Col>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend><InputGroup.Text>Skill Title</InputGroup.Text></InputGroup.Prepend>\r\n                                <Form.Control type=\"text\" ref=\"skill_title\" placeholder=\"Enter Skill Here\" />\r\n                            </InputGroup>\r\n                            <Form.Group as={Row}>\r\n                                <Form.Label column sm={3}>Description:</Form.Label>\r\n                                <Col sm={9}>\r\n                                    <Form.Control as=\"textarea\" rows=\"3\" ref=\"skill_description\" placeholder=\"Please describe your skill here\" />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        <p>{this.state.errMsg}</p>\r\n\r\n                        <Row className=\"bottomRow\">\r\n                            <Col xs={12} sm={12} md={3} lg={3} xl={3}>\r\n                                <Button className=\"btn-submit\" variant=\"success\" onClick={this.handleSubmit}>Add Listing</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Skill;","import React, { Fragment } from 'react';\r\nimport { Button, Form, Col, InputGroup, Row, Modal, Spinner } from 'react-bootstrap';\r\nimport { MDBPopover, MDBPopoverBody, MDBPopoverHeader, MDBBtn } from \"mdbreact\";\r\n\r\nclass Transport extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { errMsg: null,\r\n                       items: null,\r\n                       showModal: false}\r\n        this.fetchCar = this.fetchCar.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        // this.deleteItem = this.deleteItem.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n        // this.sendRequest = this.sendRequest.bind(this);\r\n    };\r\n    // componentWillMount \r\n\r\n    componentDidMount(){this.fetchCar();}\r\n\r\n    deleteItem = async (car_id) => {\r\n        await fetch(`${global.deleteAPI}table=Transport&condition=car_id=${car_id}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'x-api-key': process.env.REACT_APP_API_KEY,\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .catch(err => console.log(err));\r\n        this.fetchCar();\r\n    };\r\n\r\n    // fetchCar: retrieves current listings from Transport table\r\n    fetchCar = async () => {\r\n        await fetch(`${global.selectAPI}table=Transport&field=*`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'x-api-key': process.env.REACT_APP_API_KEY,\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(object => this.setState({ items: object }));\r\n    };\r\n\r\n    handleModalClose = () => {this.setState({showModal: false, file: null})};\r\n    handleModalShow = () => {this.setState({showModal: true})};\r\n\r\n    handleSubmit = async () => {\r\n        let car_title = this.refs.car_title.value;\r\n        let car_make = this.refs.car_make.value;\r\n        let car_model = this.refs.car_model.value;\r\n        let car_desintation = this.refs.car_desintation.value;\r\n        let car_time = this.refs.car_time.value;\r\n        if (!car_title) {\r\n            this.setState({errMsg: \"Please provide a title for this item\"});\r\n        } else if (!car_make) {\r\n            this.setState({errMsg: \"Please provide a make for this item\"});\r\n        } else if (!car_model) {\r\n            this.setState({errMsg: \"Please provide a model for this item\"});\r\n        } else if (!car_desintation) {\r\n            this.setState({errMsg: \"Please provide a destination for this item\"});\r\n        } else if (!car_time) {\r\n            this.setState({errMsg: \"Please provide a specific time)\"});\r\n        } else {\r\n            this.setState({errMsg: null});\r\n    \r\n            if (!this.state.errMsg) {\r\n                // Save to DB\r\n                await this.saveToDB(car_title, car_make, car_model, car_desintation, car_time);\r\n                \r\n                // Update View of Item Listings\r\n                this.fetchCar();\r\n\r\n                // Lastly, close the modal\r\n                this.handleModalClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    saveToDB = async(car_title, car_make, car_model, car_desintation, car_time) => {\r\n        let url = `${global.insertAPI}table=Transport&field=car_title,car_make,car_model,car_destination,car_time,owner&value='${car_title}','${car_make}','${car_model}','${car_desintation}','${car_time}','${global.customAuth.email}'`;\r\n        await fetch(url, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'x-api-key': process.env.REACT_APP_API_KEY,\r\n                    }\r\n                })\r\n                .then(response => console.log(response))\r\n                .catch(err => console.log(err));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Col xs={8} sm={8} md={10} lg={10} xl={10}>\r\n                        <h1 className=\"categoryName\">Transportation</h1>\r\n                    </Col>\r\n                    <Col className=\"justify-content-md-end\">\r\n                        {/* Add Listing Button - Only shown if current user is logged in */}\r\n                        { global.customAuth.isAuthenticated && (\r\n                            <Button onClick={this.handleModalShow}>Add Listing</Button>\r\n                            )}\r\n                    </Col>\r\n                </Row>\r\n                <p className=\"categoryDesc\">Care to share a ride?</p>\r\n        \r\n                {!this.state.items\r\n                // No items have been fetched yet\r\n                ? (\r\n                    <Row>\r\n                        <Spinner animation=\"grow\" size=\"sm\" />\r\n                        <p>Loading...</p>\r\n                    </Row>\r\n                )\r\n                : (\r\n                    <Fragment>\r\n                        {this.state.items.length === 0\r\n                         ? // No items exist\r\n                            (<p>No items to display!</p>)\r\n                         : // Render Items\r\n                            <Fragment>\r\n                                {this.state.items.map(item => \r\n                                    <MDBPopover\r\n                                            placement=\"bottom\"\r\n                                            popover\r\n                                            clickable\r\n                                            key={item.car_id}\r\n                                            className=\"mdbpopover\"\r\n                                        >\r\n                                            <MDBBtn className=\"listingBtn\">\r\n                                                <figure className=\"floatLeft\">\r\n                                                    {/* <img className=\"listingImg\" src={item.item_img||\"https://cdn1.iconfinder.com/data/icons/image-manipulations/100/13-512.png\"} alt={item.item_name}/> */}\r\n                                                    <figcaption>{item.car_title}</figcaption>\r\n                                                </figure>\r\n                                            </MDBBtn>\r\n                                            <div>\r\n                                                <MDBPopoverHeader>{item.car_title}</MDBPopoverHeader>\r\n                                                <MDBPopoverBody>\r\n                                                    <p style={{display:\"none\"}} ref=\"itemID\">{item.car_id}</p>\r\n                                                    <p className=\"p\">{item.car_title}</p>\r\n                                                    <p className=\"p\">{item.car_time}</p>\r\n                                                    {global.customAuth.email !== '' && (\r\n                                                        <Fragment>\r\n                                                            {item.owner === global.customAuth.email\r\n                                                            ? <Fragment>\r\n                                                                <Button variant=\"danger\" size=\"sm\" onClick={() => this.deleteItem(item.car_id)}>Delete</Button>\r\n                                                            </Fragment>\r\n                                                            : <Fragment>\r\n                                                                <p className=\"p\" ref=\"owner\">{item.owner}</p>\r\n                                                                <Button variant=\"success\" size=\"sm\" onClick={() => this.sendRequest(item.owner, item.car_id)}>Request</Button>\r\n                                                            </Fragment>\r\n                                                            }\r\n                                                        </Fragment>\r\n                                                    )}\r\n                                                </MDBPopoverBody>\r\n                                            </div>\r\n                                        </MDBPopover>\r\n                                )}\r\n                            </Fragment>\r\n                        }\r\n                    </Fragment>\r\n                )}\r\n                {/* Add Listing Modal */}\r\n                <Modal show={this.state.showModal} onHide={this.handleModalClose} centered size=\"lg\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add a new listing to the Transportation Category</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Col>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend><InputGroup.Text>Car Name</InputGroup.Text></InputGroup.Prepend>\r\n                                <Form.Control type=\"text\" ref=\"car_title\" placeholder=\"Enter Name Here\" />\r\n                            </InputGroup>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend><InputGroup.Text>Car Make</InputGroup.Text></InputGroup.Prepend>\r\n                                <Form.Control type=\"text\" ref=\"car_make\" placeholder=\"Enter Make Here\" />\r\n                            </InputGroup>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend><InputGroup.Text>Car Model</InputGroup.Text></InputGroup.Prepend>\r\n                                <Form.Control type=\"text\" ref=\"car_model\" placeholder=\"Enter Model Here\" />\r\n                            </InputGroup>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend><InputGroup.Text>Car Destination</InputGroup.Text></InputGroup.Prepend>\r\n                                <Form.Control type=\"text\" ref=\"car_destination\" placeholder=\"Enter Destination Here\" />\r\n                            </InputGroup>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend><InputGroup.Text>Car Time</InputGroup.Text></InputGroup.Prepend>\r\n                                <Form.Control type=\"text\" ref=\"car_time\" placeholder=\"Enter Time Here\" />\r\n                            </InputGroup>\r\n                        </Col>\r\n\r\n                        <p>{this.state.errMsg}</p>\r\n\r\n                        <Row className=\"bottomRow\">\r\n                            <Col xs={12} sm={12} md={3} lg={3} xl={3}>\r\n                                <Button className=\"btn-submit\" variant=\"success\" onClick={this.handleSubmit}>Add Listing</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Transport;","import React from 'react';\r\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap';\r\n\r\nimport Listing from './Listing';\r\nimport S3FileUpload from 'react-s3';\r\n\r\n// Style\r\nimport './styles/Listing.css';\r\n\r\nconst config = {\r\n    bucketName: 'campus-share-files',\r\n    dirName: 'LostAndFound',\r\n    region: 'us-east-2', // Ohio\r\n    accessKeyId: process.env.REACT_APP_S3_ACCESS_KEY_ID,\r\n    secretAccessKey: process.env.REACT_APP_S3_SECRET_ACCESS_KEY,\r\n};\r\n\r\nclass LostAndFound extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {file: null,\r\n                      fileURL: null,\r\n                      fileLocation: null,\r\n                      errMsg: null};\r\n\r\n    }\r\n\r\n    handleImageUpload = (event) => {\r\n        if (event.target.files.length > 0) {\r\n            this.setState({file:event.target.files[0], fileURL: URL.createObjectURL(event.target.files[0])})\r\n        }\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        let item_name = this.refs.item_name.value;\r\n        let datetime_found = this.refs.item_name.value;\r\n        let location_found = this.refs.location_found.value;\r\n        let item_img = this.state.fileURL;\r\n        if (!item_name) {\r\n            this.setState({errMsg: \"Please provide a name for this item\"});\r\n        } else if (!datetime_found) {\r\n            this.setState({errMsg: \"Please provide the day and time this item was found\"});\r\n        } else if (!location_found) {\r\n            this.setState({errMsg: \"Please provide the location this item was found\"});\r\n        } else if (!item_img) {\r\n            this.setState({errMsg: \"Please provide an image of this item\"});\r\n        } else {\r\n            this.setState({errMsg: null});\r\n            // Upload to S3\r\n            this.uploadToS3();\r\n    \r\n            if (!this.state.errMsg) {\r\n                // Save to DB\r\n                this.saveToDB(item_name, datetime_found, location_found, item_img);\r\n                \r\n                // Lastly, close the modal\r\n            }\r\n        }\r\n    }\r\n\r\n    uploadToS3 = async () => {\r\n        await S3FileUpload.uploadFile(this.state.file, config)\r\n        .then(data => this.setState({fileLocation: data.location}))\r\n        .catch(err => this.setState({errMsg: err}));\r\n    }\r\n\r\n    saveToDB = async(item_name, datetime_found, location_found, item_img) => {\r\n        await fetch(`${global.insertAPI}table=LostAndFound&field=item_name, datetime_found, location_found, item_img, discoverer&value='${item_name}', ${datetime_found}, '${location_found}', '${item_img}', '${global.customAuth.email}'`, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'x-api-key': process.env.REACT_APP_API_KEY,\r\n                    }\r\n                })\r\n                .then(response => console.log(response))\r\n                .catch(err => console.log(err));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Listing categoryName=\"Lost & Found\"\r\n                     categoryDesc='Exception: \"Lost time is never found again\" - Benjamin Franklin'\r\n                     form={\r\n                        <Form>\r\n                            {/* Item Name */}\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend><InputGroup.Text>Item Name</InputGroup.Text></InputGroup.Prepend>\r\n                                <Form.Control type=\"text\" ref=\"item_name\" placeholder=\"...\"/>\r\n                            </InputGroup>\r\n                            {/* Location Found */}\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend><InputGroup.Text>Location Found</InputGroup.Text></InputGroup.Prepend>\r\n                                <Form.Control type=\"text\" ref=\"location_found\" placeholder=\"...\" />\r\n                            </InputGroup>\r\n                            {/* Date & Time Found */}\r\n                            <input type=\"datetime-local\"/>\r\n                            {/* Image */}\r\n                            <input type=\"file\" onChange={this.handleImageUpload} accept=\"image/gif, image/jpeg, image/png\" />\r\n                            {this.state.fileURL !== null && (<img src={this.state.fileURL} alt=\"\" className=\"uploadPreview\"/>)}\r\n\r\n                            <p>{this.state.errMsg}</p>\r\n\r\n                            <Row className=\"bottomRow\">\r\n                                <Col xs={12} sm={12} md={3} lg={3} xl={3}>\r\n                                    <Button className=\"btn-submit\" variant=\"success\" onClick={this.handleSubmit}>Add Listing</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                     }\r\n            />\r\n        )\r\n    }\r\n};\r\n\r\nexport default LostAndFound;","import React, { Fragment } from 'react';\r\nimport { Button, Form, Spinner} from 'react-bootstrap';\r\nconst jwt = require('jwt-simple');\r\nconst bcrypt = require('bcryptjs');\r\n\r\n// Requires JWT to access this component's page\r\n// Two views of the component: one for the page, and one for the user's profile?\r\n\r\n\r\nclass ResetPassword extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.savePassword = this.savePassword.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = { userEmail: '',\r\n                       hashedPassword: '',\r\n                       secret: '',\r\n                       token: '',\r\n                       validated: false,\r\n                       passwordSaved: false,\r\n                       serverErrorMsg: '',\r\n                       showError: false}\r\n        this.validate = this.validate.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        let url_parts = window.location.href.split('/');\r\n        let email = url_parts[4];\r\n        let JWT = url_parts[5];\r\n        this.setState({userEmail: email, token: JWT});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getSecret();\r\n        this.validate();\r\n    }\r\n\r\n    getSecret = async () => {\r\n        await fetch(`${global.selectAPI}table=Users&field=*&condition=email='${this.state.userEmail}'`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Access-Control-Allow-Origin': true,\r\n                'x-api-key': global.APIkey,\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(object => this.setState({secret: object[0].resetPasswordSecret, hashedPassword: object[0].password}))\r\n        .catch(err => this.setState({serverErrorMsg: err.text}));\r\n    };\r\n\r\n    // Validate JWT\r\n    validate = async () => {\r\n        if (this.state.hashedPassword === this.state.secret.slice(0,(this.state.hashedPassword.length))) {\r\n            try {\r\n                let decoded = jwt.decode(this.state.token, this.state.secret);\r\n                if (decoded === this.state.userEmail) {\r\n                    this.setState({validated: true});\r\n                } else {\r\n                    this.setState({showError: true});\r\n                }\r\n            } catch(err) {\r\n                this.setState({showError: true});\r\n            }\r\n        } else {\r\n            this.setState({showError: true});\r\n        }\r\n    }\r\n\r\n    // Save Password to DB (HASH & SALT!)\r\n    // Also need to know which user it is -- could probably pull from URL parameter! (still not secure, though...)\r\n    savePassword = async (password) => {\r\n        bcrypt.hash(password, 8, async function(err, hash){\r\n            await fetch(`${global.backendURL}/query`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    query: `UPDATE Users SET password='${hash}' WHERE email='${global.customAuth.email}`,\r\n                })\r\n            }).then(response => response.json()\r\n            .then(console.log(response)));\r\n            // Check response to make sure this goes through! before reloading the page.\r\n        });\r\n        // Require users to sign in again?\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        let password = this.refs.newPassword.value;\r\n        console.log(password);\r\n        if (password.length === 0) {\r\n            alert(\"no password\");\r\n        } else {\r\n            this.savePassword(this.refs.newPassword.value);\r\n            alert(\"password saved successfully!\")\r\n            setTimeout(5000);\r\n            this.setState({validated: true});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n            {/* Only show form if user is validated */}\r\n            { this.state.validated === false\r\n                // Spinner for Loading Validation\r\n                ? ( this.state.showError === false\r\n                    ? (<Spinner animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                       </Spinner>)\r\n                    : (<Fragment>\r\n                            <p>This link is not valid. Please request a new password reset link:</p>\r\n                            <a href=\"/recoverpassword\">Request New Link</a>\r\n                       </Fragment>)\r\n                  )\r\n                // Form to change password\r\n                :   (<Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\r\n                        <Form.Group controlId=\"newPassword\">\r\n                            <Form.Label>New Password</Form.Label>\r\n                            <Form.Control required type=\"password\" ref=\"newPassword\" placeholder=\"Password\" />\r\n                            <Form.Control.Feedback type=\"invalid\">Please enter a password.</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form>)\r\n            }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResetPassword;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\nimport Image from 'react-bootstrap/Image'\r\nimport \"./styles/Slideshow.css\";\r\n\r\n\r\nfunction ControlledCarousel() {\r\n    const [index, setIndex] = React.useState(0);\r\n    const [direction, setDirection] = React.useState(null);\r\n  \r\n    const handleSelect = (selectedIndex, e) => {\r\n      setIndex(selectedIndex);\r\n      setDirection(e.direction);\r\n    };\r\n  \r\n    return (\r\n      <Carousel activeIndex={index} direction={direction} onSelect={handleSelect}>\r\n        <Carousel.Item>\r\n            <Image className=\"carouselImg\" src=\"https://elasticbeanstalk-us-east-2-875968549276.s3.us-east-2.amazonaws.com/banner1.png\" fluid />\r\n        </Carousel.Item>\r\n        <Carousel.Item>\r\n            <Image className=\"carouselImg\" src=\"https://elasticbeanstalk-us-east-2-875968549276.s3.us-east-2.amazonaws.com/banner_2.png\" fluid />\r\n        </Carousel.Item>\r\n      </Carousel>\r\n    );\r\n  }\r\n\r\nexport default ControlledCarousel;","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n// Custom Imports\r\nimport \"./styles/Home.css\";\r\nimport ControlledCarousel from \"./Slideshow\";\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            exampleAPICallData: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let url = 'https://h1xqnteg60.execute-api.us-east-2.amazonaws.com/SelectProd?table=Textbooks&field=book_author';\r\n        fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'x-api-key': 'dKEhYInqF09xERGUZcQQ3aCKELroAbsk1vVZLhb3',\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            this.setState({\r\n                exampleAPICallData: json,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <ControlledCarousel id=\"slideshow\"/>\r\n                <div className=\"text-center\">\r\n                    <a href=\"/signin\"><Button variant=\"success\">Sign In</Button></a>\r\n                    <a href=\"/createaccount\"><Button variant=\"secondary\">Create Account</Button></a>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                    <a href=\"/categories\">Continue as guest</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\n// Use this reference anytime the backend is needed\r\nglobal.backendURL = \"http://campus-share-backend.us-east-2.elasticbeanstalk.com\";\r\nglobal.thisURL = \"http://localhost:3000\";\r\nglobal.selectAPI = \"https://h1xqnteg60.execute-api.us-east-2.amazonaws.com/SelectProd?\";\r\nglobal.deleteAPI = \"https://a2cisw63pb.execute-api.us-east-2.amazonaws.com/Prod?\";\r\nglobal.insertAPI = \"https://00tyqs4c74.execute-api.us-east-2.amazonaws.com/Prod?\";\r\nglobal.updateAPI = \"https://qa1gniaexi.execute-api.us-east-2.amazonaws.com/Prod?\";\r\nglobal.APIkey = process.env.REACT_APP_API_KEY;\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/campushare_logo.2ea92f96.png\";","module.exports = __webpack_public_path__ + \"static/media/bell.a2e70fa6.png\";","module.exports = __webpack_public_path__ + \"static/media/AboutUs.e21e8f56.png\";","import React, { Fragment } from 'react';\r\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\r\nimport { MDBContainer } from \"mdbreact\";\r\n\r\nimport \"./styles/Listing.css\";\r\n\r\n// Listing: Parent Component which Categories can inherit from\r\n//  props must include:\r\n//      categoryName    Name of the category page\r\n//      categoryDesc    Short, one-line description or quote\r\n//      tableName       Name of the associated table in the Database\r\n\r\nclass Listing extends React.Component {\r\n\r\n    // Item Listing\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { items: [], // to hold results from querying the DB table\r\n                       showModal: false,\r\n                       showConfirmDelete: false\r\n                     };\r\n        this.fetchItems = this.fetchItems.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        this.handleConfirmDeleteShow = this.handleConfirmDeleteShow.bind(this);\r\n        this.handleConfirmDeleteClose = this.handleConfirmDeleteClose.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n    }\r\n\r\n    // Fetch Initial Items\r\n    componentDidMount = async () => {this.fetchItems()};\r\n\r\n    // Modal Functions\r\n    handleModalClose = () => {this.setState({showModal: false})};\r\n    handleModalShow = () => {this.setState({showModal: true})};\r\n    handleConfirmDeleteClose = () => {this.setState({showConfirmDelete: false})};\r\n    handleConfirmDeleteShow = () => {this.setState({showConfirmDelete: true})};\r\n\r\n    // Add Item Listing\r\n    handleSubmit = () => {\r\n        // TODO: Take values of all fields from the form and fill in a new entry in the table\r\n\r\n        // Add Upload to S3\r\n        \r\n    }\r\n\r\n    // Retrieve Items in current category from DB\r\n    fetchItems = async () => {\r\n        await fetch(`${global.backendURL}/query`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                query: `SELECT * FROM ${this.props.tableName}`,\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(object => this.setState({ items: object.data }));\r\n    }\r\n\r\n    // Request Item: create new notifitaction\r\n    requestItem = async (requester_email, offerer_email, item_id, source_table) => {\r\n        await fetch(`${global.backendURL}/query`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                query: `INSERT INTO Notifications (requester_email, offerer_email, item_id, source_table) VALUES (\"${requester_email}\", \"${offerer_email}\", \"${item_id}\", \"${source_table}\");`,\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => this.setState({ items: data }));\r\n    }\r\n\r\n    // Delete Item: remove item from DB; current user must be owner\r\n    deleteItem = async () => {\r\n        console.log(\"TODO: Delete item with call to backend\");\r\n    }\r\n\r\n\r\n    // Render Page\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Col xs={8} sm={8} md={10} lg={10} xl={10}>\r\n                        <h1 className=\"categoryName\">{this.props.categoryName}</h1>\r\n                    </Col>\r\n                    <Col className=\"justify-content-md-end\">\r\n                        {/* Add Listing Button - Only shown if current user is logged in */}\r\n                        { global.customAuth.isAuthenticated && (\r\n                            <Button onClick={this.handleModalShow}>Add Listing</Button>\r\n                            )}\r\n                    </Col>\r\n                </Row>\r\n                <p className=\"categoryDesc\">{this.props.categoryDesc}</p>\r\n\r\n                {/* Modal - seen when Add Listing Button is clicked*/}\r\n                <Modal show={this.state.showModal} onHide={this.handleModalClose} centered size=\"lg\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add a new listing to the {this.props.categoryName} Category</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {/* Iterate though fields for DB table? */}\r\n                        {this.props.form}\r\n                    </Modal.Body>\r\n                </Modal>\r\n\r\n                {/* <Modal show={this.state.showConfirmDelete} onHide={this.handleConfirmDeleteClose} animation={false} centered size=\"sm\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Delete Item</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form onSubmit={this.deleteItem}>\r\n                            <p>Are you sure you want to delete this item?</p>\r\n                            <Button variant=\"\" onClick={this.handleConfirmDeleteClose}>Cancel</Button>\r\n                            <Button variant=\"danger\" type=\"submit\">Yes, Delete</Button>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal> */}\r\n\r\n                {/* Offerings Cards - Item Title, Image, Dates for Loan (Click for detail box & request button) */}\r\n                <MDBContainer>\r\n                    <Row className=\"mdbpopoeverRow\">\r\n                        {this.props.cards}\r\n                    </Row>\r\n                </MDBContainer>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Listing;"],"sourceRoot":""}