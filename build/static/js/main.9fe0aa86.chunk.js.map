{"version":3,"sources":["components/App.js","components/Navbar.jsx","components/Landing.jsx","components/Categories.jsx","components/SignIn.jsx","components/CreateAccount.jsx","components/Profile.jsx","components/ResetPassword.jsx","components/RecoverPassword.jsx","components/categories/Textbooks.jsx","components/categories/Misc.jsx","serviceWorker.js","components/Slideshow.jsx","components/Home.jsx","index.js","components/images/bell.png","components/images/campushare_logo.png"],"names":["getCookie","cname","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","global","customAuth","isAuthenticated","email","authenticate","this","d","Date","setTime","getTime","toUTCString","signout","window","location","href","PrivateRoute","Component","component","rest","render","props","to","App","className","expand","sticky","src","require","alt","Toggle","aria-controls","Collapse","id","path","exact","Categories","sectionTitle","Misc","SignIn","CreateAccount","Profile","RecoverPassword","NavBar","Link","Text","variant","size","onClick","backendURL","Landing","componentDidMount","fetchNotifications","a","async","fetch","method","headers","body","JSON","stringify","query","then","response","json","data","setState","requests","offers","sendMessage","notificationId","status","catch","error","console","dismissNotification","state","showModal","bind","map","request","show","onClose","key","notification_id","Header","offerer_email","Body","offer","requester_email","React","class","bcrypt","verifyLogin","event","preventDefault","log","refs","value","password","hash","compare","err","res","alert","sm","md","lg","onSubmit","Group","as","Row","controlId","Label","column","Control","type","ref","placeholder","required","Append","Feedback","span","offset","Check","label","verifyEmail","rv","useState","setShow","userdata","majors","majors_options","push","user_email","ResetPassword","savePassword","handleSubmit","newPassword","setTimeout","validated","passwordSaved","noValidate","nodemailer","confirmAccountExists","text","sendEmail","createTestAccount","testAccount","transporter","createTransport","host","port","secure","auth","user","pass","sendMail","from","subject","html","thisURL","info","messageId","getTestMessageUrl","accountExists","googleAPI","Textbooks","fetchBooks","items","fetchVolumeInfo","title","textbook_title","API_KEY","bookOptions","handleModalShow","handleModalClose","gbID","GoogleBookID","gbTitle","gbVolInfo","volumeInfo","gbBookTitle","gbBookAuthor","authors","gbBookImage","imageLinks","smallThumbnail","sendRequest","owner","bookID","item","placement","popover","clickable","book_id","book_image","book_title","style","display","book_author","course","loanPeriod","animation","onHide","closeButton","Title","bookOption","publisher","publishedDate","fetchItems","item_name","item_desc","loan_deadline","item_img","item_id","loan_period","centered","Prepend","rows","accept","Boolean","hostname","match","unregister","navigator","serviceWorker","ready","registration","ControlledCarousel","index","setIndex","direction","setDirection","Carousel","activeIndex","onSelect","selectedIndex","e","Item","Image","fluid","Home","Button","ReactDOM","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9fe0aa86.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\";\r\n\r\n// Component Imports\r\nimport NavBar from \"./Navbar\";\r\n\r\n// Public Pages\r\nimport Landing from \"./Landing\"\r\nimport Categories from \"./Categories\";\r\nimport SignIn from \"./SignIn\";\r\nimport CreateAccount from \"./CreateAccount\";\r\n\r\n// Private Pages\r\nimport Home from \"./Home\";\r\nimport Profile from \"./Profile\";\r\nimport RecoverPassword from \"./RecoverPassword\";\r\n\r\n// Category Pages\r\nimport Textbooks from \"./categories/Textbooks\";\r\nimport Misc from \"./categories/Misc\";\r\n\r\n// Bootstrap Imports\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nconst getCookie = (cname) => {\r\n  let name = cname + \"=\";\r\n  let decodedCookie = decodeURIComponent(document.cookie);\r\n  let ca = decodedCookie.split(';');\r\n  for(let i = 0; i <ca.length; i++) {\r\n    let c = ca[i];\r\n    while (c.charAt(0) === ' ') {\r\n      c = c.substring(1);\r\n    }\r\n    if (c.indexOf(name) === 0) {\r\n      return c.substring(name.length, c.length);\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\n// TODO: Check if a user is logged in with JWTs\r\nglobal.customAuth = {\r\n  isAuthenticated: (getCookie(\"email\") !== \"\"),\r\n  email: getCookie(\"email\"),\r\n  authenticate(email) {\r\n    this.email = email;\r\n    // Set expires to 24 hrs by default; add 14 days based on user selection later\r\n    let d = new Date();\r\n    d.setTime(d.getTime() + (24*60*60*1000));\r\n    document.cookie = `email=${this.email}; expires=${d.toUTCString()}; path=/;`\r\n  },\r\n  signout() {\r\n    // Set to Past Date\r\n    let d = new Date();\r\n    d.setTime(d.getTime() - (24*60*60*1000));\r\n    document.cookie = `email=\"\"; expires=${d.toUTCString()}; path=/;`\r\n    window.location.href = \"/\";\r\n  }\r\n}\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => (\r\n  <Route {...rest} render={(props) => (\r\n    global.customAuth.isAuthenticated\r\n      ? <Component {...props} />\r\n      : <Redirect to='/signin' />\r\n  )} />\r\n)\r\n\r\n// App: main body of the page\r\nconst App = () => {\r\n\r\n  // Returns the App Instance\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        {/* Nav Bar -- on all pages */}\r\n        <Navbar className=\"App-navBar\" expand=\"lg\" sticky=\"top\">\r\n          <img src={require(\"./images/campushare_logo.png\")} className=\"logo\" alt=\"CampusShare Logo\"/>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <NavBar />\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <div className=\"element\">\r\n          {/* Renders the proper content based on route */}\r\n          <Switch>\r\n            {/* Routes to Landing or Home based on if a user is logged in */}\r\n            <Route path=\"/\" exact render={(props) => (\r\n              // The order of Landing and Home is opposite to what I would expect\r\n              // ...just rolling with it for now.\r\n              global.customAuth.isAuthenticated\r\n              ? <Landing />\r\n              : <Home {...props} />\r\n            )} />\r\n            <Route path=\"/categories\" component={Categories}/>\r\n            {/* Public Pages */}\r\n            <Route path=\"/textbooks\">\r\n              <Textbooks sectionTitle=\"Textbooks\" className=\"listing\" />\r\n            </Route>\r\n            <Route path=\"/misc\" component={Misc} />\r\n            <Route path=\"/signin\" component={SignIn} />\r\n            <Route path=\"/createaccount\" component={CreateAccount} />\r\n            {/* Private Pages */}\r\n            <PrivateRoute path=\"/profile\" component={Profile} />\r\n            <PrivateRoute path=\"/recoverpassword\" component={RecoverPassword} />\r\n          </Switch>\r\n        </div>\r\n        </Router>\r\n        <p className=\"footerMessage\">Candid Cheetah Co. &copy;2019-2020</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// src/components/NavBar.js\r\n\r\nimport React, { Fragment } from \"react\";\r\nimport { Button, Nav, Navbar } from \"react-bootstrap\";\r\n\r\n\r\nconst NavBar = () => {\r\n\r\n    return (\r\n        <Fragment>\r\n            { global.customAuth.isAuthenticated\r\n                ? (\r\n                    <Fragment>\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link href=\"/\">Home</Nav.Link>\r\n                            <Nav.Link href=\"/categories\">Categories</Nav.Link>\r\n                        </Nav>\r\n                        <Nav className=\"justify-content-end\">\r\n                            <Navbar.Text>\r\n                                Signed in as: <a href=\"/profile\">{global.customAuth.email}</a>\r\n                            </Navbar.Text>\r\n                            <Button variant=\"outline-secondary\" size=\"sm\" onClick={global.customAuth.signout}>Sign Out</Button>\r\n                        </Nav>\r\n                    </Fragment>\r\n                )\r\n                : (\r\n                    <Fragment>\r\n                        <Nav className=\"justify-content-end\">\r\n                            <Nav.Link>About us</Nav.Link>\r\n                            <Nav.Link>How does it work</Nav.Link>\r\n                        </Nav>\r\n\r\n                    </Fragment>\r\n                )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import React, { Fragment } from 'react';\r\nimport { Button, Col, Toast } from 'react-bootstrap';\r\nimport \"./Landing.css\";\r\n// import UserDetailsModal from './components/UserDetailsModal';\r\n\r\nconst backendURL = \"http://campus-share-backend.us-east-2.elasticbeanstalk.com\";\r\n\r\nclass Landing extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { showModal: false,\r\n                    //    userData: this.props.userData,\r\n                       requests: [],\r\n                       offers: []\r\n                     }\r\n        this.fetchNotifications = this.fetchNotifications.bind(this);\r\n        this.dismissNotification = this.dismissNotification.bind(this);\r\n    }\r\n\r\n    // Initial Notification Fetch\r\n    componentDidMount = () => {this.fetchNotifications()};\r\n\r\n    fetchNotifications = async () => {\r\n        // Populate Request Notifications\r\n        await fetch(`${backendURL}/query`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n                query: `SELECT * from Notifications WHERE requester_email=\"${global.customAuth.email}\" ORDER BY notification_id DESC`,\r\n            }), })\r\n            .then(response => response.json())\r\n            .then(data => this.setState({requests: data.data}));\r\n\r\n        // Populate Offer Notifications\r\n        await fetch(`${backendURL}/query`, {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify({\r\n                        query: `SELECT * from Notifications WHERE offerer_email=\"${global.customAuth.email}\" ORDER BY notification_id DESC`,\r\n                    }), })\r\n                    .then(response => response.json())\r\n                    .then(data => this.setState({offers: data.data}));\r\n    }\r\n\r\n    // Sends an approval or decline message (notification)\r\n    sendMessage = async (notificationId, status) => {\r\n        await fetch(`${backendURL}/query`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n                query: `UPDATE Notifications SET status = \"${status}\" WHERE notification_id = \"${notificationId}\"`,\r\n            })\r\n        })\r\n        .catch(error => {\r\n            console.error(error);\r\n        });\r\n        this.fetchNotifications();\r\n    }\r\n\r\n    // Dismisses a notification\r\n    // Either:\r\n    //   set that specific Toast component's display to none\r\n    //   mark as seen in DB?\r\n    dismissNotification = () => {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <div className=\"clearfix\">\r\n                    <img className=\"bell2\" src={require(\"./images/bell.png\")} alt=\"Luther Bell\"/>\r\n                    <h1 className=\"heading1\">Home</h1>\r\n                    <h3 className=\"heading3\">See updates here</h3>\r\n                </div>\r\n                <p>Notifications</p>\r\n                <div className=\"notifyCard\">\r\n                    <div className=\"notifyBorder\">\r\n                        {/* TODO: Populate the nofications from db notifications table */}\r\n                        <Col className='notifyCol'>\r\n                            <Fragment>\r\n                            {this.state.requests && (\r\n                                this.state.requests.map(request =>\r\n                                    <Toast show={true} onClose={this.dismissNotification} key={request.notification_id}>\r\n                                        <Toast.Header>\r\n                                            <strong className=\"mr-auto\">Request</strong>\r\n                                            <small>from {request.offerer_email}</small>\r\n                                        </Toast.Header>\r\n                                        <Toast.Body>\r\n                                            {/* Replace this with the message of the notification */}\r\n                                            <p>This request is {request.status}.</p>\r\n                                        </Toast.Body>\r\n                                    </Toast>\r\n                                )\r\n                            )}\r\n                            </Fragment>\r\n                            {this.state.offers && (\r\n                                this.state.offers.map(offer =>\r\n                                    <Toast show={true} onClose={this.dismissNotification} key={offer.notification_id}>\r\n                                        <Toast.Header>\r\n                                            <strong className=\"mr-auto\">Offer</strong>\r\n                                            <small>from {offer.requester_email}</small>\r\n                                        </Toast.Header>\r\n                                        <Toast.Body>\r\n                                            {/* TODO: Add info on the request! Join Tables on item_id -- do we need to save the table name in a notification entry then??? */}\r\n                                            { offer.status === \"pending\"\r\n                                              ? (\r\n                                                <Fragment>\r\n                                                    <p>Please approve or decline this request:</p>\r\n                                                    <Button variant=\"success\" size=\"sm\" onClick={() => this.sendMessage(offer.notification_id, \"accepted\")}>Approve</Button>\r\n                                                    <Button variant=\"danger\" size=\"sm\" onClick={() => this.sendMessage(offer.notification_id, \"declined\")}>Decline</Button>\r\n                                                </Fragment>\r\n                                                )\r\n                                              : (\r\n                                                <p>You have {offer.status} this request.</p>\r\n                                            )}    \r\n                                            </Toast.Body>\r\n                                    </Toast>\r\n                                )\r\n                            )}\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n                {/* TODO: Show UserDetails_Modal if user is newly added to DB (edit showModal value) */}\r\n                {/* <UserDetailsModal closePhrase=\"Later\" show={this.state.showModal} title=\"Add your details!\"/> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Landing;\r\n","import React from 'react';\r\nimport \"./Categories.css\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nclass Categories extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row className=\"row\">\r\n                    <Col>\r\n                        <a href=\"https://www.luther.edu/\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/clothing.png\" className=\"categoryImg\"/>\r\n                                <figcaption class=\"categoryFigcaption\">Clothing</figcaption>\r\n                            </figure>\r\n                        </a> \r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"categories\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/events.png\" className=\"categoryImg\"/> \r\n                                <figcaption class=\"categoryFigcaption\">Events</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"categories\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/food.png\" className=\"categoryImg\"/>\r\n                                <figcaption class=\"categoryFigcaption\">Food</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"categories\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/housing.png\" className=\"categoryImg\"/>\r\n                                <figcaption class=\"categoryFigcaption\">Housing</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"categories\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/lostfound.png\" className=\"categoryImg\"/> \r\n                                <figcaption class=\"categoryFigcaption\">Lost & Found</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"row\">\r\n                    <Col>\r\n                        <a href=\"https://www.xkcd.com/\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/meme.png\" className=\"categoryImg\"/> \r\n                                <figcaption class=\"categoryFigcaption\">Meme</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"categories\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/mentor.png\" className=\"categoryImg\"/>\r\n                                <figcaption class=\"categoryFigcaption\">Mentorship</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"/misc\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/umbrella.png\" className=\"categoryImg\"/>\r\n                                <figcaption class=\"categoryFigcaption\">Misc.</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"categories\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/opportunities.png\" className=\"categoryImg\"/>\r\n                                <figcaption class=\"categoryFigcaption\">Opportunities</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"categories\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/projects.png\" className=\"categoryImg\"/>\r\n                                <figcaption class=\"categoryFigcaption\">Projects</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"row\">\r\n                    <Col>\r\n                        <a href=\"categories\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/skills.png\" className=\"categoryImg\"/>\r\n                                <figcaption class=\"categoryFigcaption\">Skills</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                    <Col className=\"col\">\r\n                        <a href=\"categories\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/social.png\" className=\"categoryImg\"/>\r\n                                <figcaption class=\"categoryFigcaption\">Social</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"textbooks\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/textbooks.png\" className=\"categoryImg\"/>\r\n                                <figcaption class=\"categoryFigcaption\">Textbooks</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"categories\" className=\"nounderline\">\r\n                            <figure class=\"categoryFigure\">\r\n                                <Image src=\"https://campus-share-files.s3.us-east-2.amazonaws.com/transportation.png\" className=\"categoryImg\"/>\r\n                                <figcaption class=\"categoryFigcaption\">Transportation</figcaption>\r\n                            </figure>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Categories;","import React from 'react';\r\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap';\r\n// import { Redirect } from 'react-router';\r\nimport './SignIn.css';\r\n\r\nconst bcrypt = require('bcryptjs');\r\n\r\n\r\nclass SignIn extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.verifyLogin = this.verifyLogin.bind(this);\r\n    }\r\n\r\n    // Redirect to Home if User is Already Logged in\r\n    componentDidMount() {\r\n        if (global.customAuth.isAuthenticated) {\r\n            window.location.href = \"/\";\r\n        }\r\n    }\r\n\r\n    // check email exists and password is correct\r\n    verifyLogin = async (event) => {\r\n        event.preventDefault(); // Page Reload\r\n        console.log(\"verifying login\")\r\n        let email = `${this.refs.email.value}@luther.edu`;\r\n        let password = this.refs.password.value;\r\n        let hash;\r\n        await fetch(`${global.backendURL}/query`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                query: `SELECT password FROM Users WHERE email='${email}'`,\r\n            })\r\n        }).then(response => response.json()\r\n        .then(response => hash = response.data[0].password));\r\n        if (typeof hash !== \"undefined\") {\r\n            bcrypt.compare(password, hash, function(err, res) {\r\n                // res is true or false\r\n                if (res) {\r\n                    global.customAuth.authenticate(email);\r\n                    window.location.href = \"/\"; // Replace with page that was last trying to be accessed?\r\n                } else {\r\n                    alert(\"wrong password\");\r\n                };\r\n            });\r\n        } else {\r\n            alert('email does not exist');\r\n        }\r\n\r\n        // If login is correct, then:\r\n        // global.customAuth.authenticate()\r\n\r\n    }\r\n\r\n    // Render Form to take username & password\r\n    render() {\r\n        return (\r\n            <div className=\"row justify-content-center\">\r\n                <Col sm={12} md={8} lg={6}>\r\n                    <Form onSubmit={this.verifyLogin}>\r\n                        <Form.Group as={Row} controlId=\"validationUsername\">\r\n                            <Form.Label column sm={2}>Email</Form.Label>\r\n                            <Col sm={10} md={10} lg={10}>\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"text\" ref=\"email\" placeholder=\"norsekey\" required />\r\n                                        <InputGroup.Append>\r\n                                            <InputGroup.Text id=\"inputGroupAppend\">@luther.edu</InputGroup.Text>\r\n                                        </InputGroup.Append>\r\n                                    {/* Add @luther.edu ending */}\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                    Please use your valid luther.edu email.\r\n                                    </Form.Control.Feedback>\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"validationPassword\">\r\n                            <Form.Label column sm={2}>Password</Form.Label>\r\n                            <Col sm={10} md={10} lg={10}>                    \r\n                                <Form.Control type=\"password\" ref=\"password\" placeholder=\"Password\" />\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row}>\r\n                            {/* Option for Resetting Password --> will need email functionality! */}\r\n                            <Col sm={{span: 10, offset:2}}>\r\n                                <a className=\"tinytext\" href=\"/recoverpassword\">Reset Password</a>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"staySignedIn\">\r\n                            {/* Option to stay signed in for 2 weeks */}\r\n                            <Col sm={{span: 10, offset:2}}>\r\n                                <Form.Check type=\"switch\" id=\"stay-signed-in\" label=\"Sign in for 2 weeks\"/>\r\n                                </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row}>\r\n                            <Col sm={{span: 10, offset:2}}>\r\n                                <Button variant=\"primary\" type=\"submit\">Sign In</Button>\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Col>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\r\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap';\r\n\r\nclass CreateAccount extends React.Component {\r\n\r\n    // Verify email DNE in DB\r\n    verifyEmail = async (event) => {\r\n        event.preventDefault();\r\n        let email = this.refs.email;\r\n        let rv = await fetch(`${global.backendURL}/query`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                query: `SELECT * FROM Users WHERE email=${email}`,\r\n            })\r\n        });\r\n        console.log(rv);\r\n    }\r\n\r\n    // Render Form to take email, password, and user info\r\n    render() {\r\n        return (\r\n            <div className=\"row justify-content-center\">\r\n                <Col sm={12} md={10} lg={8}>\r\n                    <Form>\r\n                        <h3>Welcome to Campus Share!</h3>\r\n                        <p>Please fill out the following information to enhance your experience.</p>\r\n                    <Form.Group as={Row} ref=\"email\">\r\n                        <Form.Label column sm={2}>Email</Form.Label>\r\n                        <Col sm={10} md={10} lg={10}>\r\n                            <InputGroup>\r\n                                <Form.Control type=\"text\" placeholder=\"norsekey\" required />\r\n                                    <InputGroup.Append>\r\n                                        <InputGroup.Text id=\"inputGroupAppend\">@luther.edu</InputGroup.Text>\r\n                                    </InputGroup.Append>\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                Please use your valid luther.edu email.\r\n                                </Form.Control.Feedback>\r\n                            </InputGroup>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"password\">\r\n                        <Form.Label column sm={2}>Password</Form.Label>\r\n                        <Col sm={10} md={10} lg={10}>                    \r\n                            <Form.Control type=\"password\" placeholder=\"Password\" />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <p>Grad Year</p>\r\n                    <p>Majors &and; Minors</p>\r\n                    <p>Interests</p>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{span: 10, offset:2}}>\r\n                            <Button variant=\"primary\" type=\"submit\">Create Account</Button>\r\n                        </Col>\r\n                    </Form.Group>     \r\n            </Form>\r\n                </Col>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateAccount;","// src/components/Profile.js\r\n\r\nimport React, { useState, Fragment } from \"react\"; //useState\r\nimport { Button, Col, Modal, Row} from \"react-bootstrap\"; // Modal\r\n// import UserDetails_Modal from \"./UserDetails_Modal\";\r\n\r\nimport \"./Profile.css\";\r\nimport ResetPassword from \"./ResetPassword\";\r\n\r\nconst backendURL = \"http://campus-share-backend.us-east-2.elasticbeanstalk.com\";\r\n\r\nconst Profile = (props) => {\r\n\r\n  // TODO: Add \"change password\"\r\n  \r\n  let email = \"\";\r\n\r\n  const [showModal, setShow] = useState(false);\r\n\r\n  function handleShow() {\r\n    fetchUserData(email);\r\n    setShow(true);\r\n  };\r\n\r\n  function handleClose() {\r\n    setShow(false);\r\n  };\r\n\r\n  const saveChanges = async() => {\r\n    // to determine if an update to the database is necessary:\r\n    // check values of current selections against userdata variable\r\n    handleClose();\r\n  }\r\n\r\n  // Retrieve current user data from DB and store in userdata\r\n  let userdata;\r\n  async function fetchUserData(user_email) {\r\n    await fetch(`${backendURL}/userdata`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n          email: user_email\r\n      })\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => userdata = data);\r\n  }\r\n\r\n  let majors = [\"Accounting\", \"Africana Studies\", \"Allied Health Sciences\", \"Anthropology\", \"Art\", \r\n                  \"Biblical Languages\", \"Biology\",\r\n                  \"Chemistry\", \"Classics\", \"Communication Studies\", \"Computer Science\",\r\n                  \"Data Science\",\r\n                  \"Economics\", \"Elementary Education\", \"English\", \"Environmental Studies\", \"Exercise Science\", \r\n                  \"French\",\r\n                  \"German\",\r\n                  \"Health Promotion\",\r\n                  \"History\",\r\n                  \"International Studies\",\r\n                  \"Management\", \"Mathematics\", \"Mathematics/Statistics\", \"Music\",\" Music education\",\r\n                  \"Neuroscience\", \"Nordic Studies\", \"Nursing\", \r\n                  \"Philosophy\", \"Physics\", \"Political science\", \"Psychology\",\r\n                  \"Religion\",\r\n                  \"Social work\", \"Sociology\", \"Spanish\",\r\n                  \"Theatre\",\r\n                  \"Visual Communication\",\r\n                  \"Women and Gender Studies\"]\r\n  let majors_options = [];\r\n  for (var i = 0; i < majors.length; i++) {\r\n      majors_options.push(<option key={majors[i]}>{majors[i]}</option>)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1>Profile Page</h1>\r\n      <Row>\r\n        <Col>\r\n          <p>Change Password</p>\r\n          <ResetPassword />\r\n        </Col>\r\n        <Col>\r\n          <p>Details</p>\r\n          <p>{userdata}</p>\r\n          <Button onClick={handleShow}>Edit</Button>\r\n          <Modal show={showModal}>\r\n            <Button onClick={saveChanges}>Save</Button>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\nconst bcrypt = require('bcryptjs');\r\n\r\nclass ResetPassword extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.savePassword = this.savePassword.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = { validated: false,\r\n                       passwordSaved: false }\r\n    }\r\n\r\n    // Save Password to DB (HASH & SALT!)\r\n    // Also need to know which user it is -- could probably pull from URL parameter! (still not secure, though...)\r\n    savePassword = async (password) => {\r\n        bcrypt.hash(password, 8, async function(err, hash){\r\n            await fetch(`${global.backendURL}/query`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    query: `UPDATE Users SET password='${hash}' WHERE email='${global.customAuth.email}`,\r\n                })\r\n            }).then(response => response.json()\r\n            .then(console.log(response)));\r\n            // Check response to make sure this goes through! before reloading the page.\r\n        });\r\n        // Require users to sign in again?\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        let password = this.refs.newPassword.value;\r\n        console.log(password);\r\n        if (password.length === 0) {\r\n            alert(\"no password\");\r\n        } else {\r\n            this.savePassword(this.refs.newPassword.value);\r\n            alert(\"password saved successfully!\")\r\n            setTimeout(5000);\r\n            this.setState({validated: true});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // Form to change password\r\n            <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\r\n                <Form.Group controlId=\"newPassword\">\r\n                    <Form.Label>New Password</Form.Label>\r\n                    <Form.Control required type=\"password\" ref=\"newPassword\" placeholder=\"Password\" />\r\n                    <Form.Control.Feedback type=\"invalid\">Please enter a password.</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResetPassword;","// Form to Send Email To Reset Password\r\nimport React from 'react';\r\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap';\r\nconst nodemailer = require('nodemailer');\r\n\r\nclass RecoverPassword extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { accountExists: true }\r\n        this.confirmAccountExists = this.confirmAccountExists.bind(this);\r\n    }\r\n\r\n    // Reset validity of account to true on page load\r\n    componentDidMount(){\r\n        this.setState({accountExists: true});\r\n    }\r\n\r\n    // Query DB for email\r\n    confirmAccountExists = async () => {\r\n        let response = await fetch(`${global.backendURL}/query`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                query: `SELECT * FROM Users WHERE email=${this.refs.email}@luther.edu`,\r\n            })\r\n        });\r\n        return response.text.length > 0;\r\n    }\r\n\r\n    // nodemailer\r\n    sendEmail = async () => {\r\n        if (this.confirmAccountExists) {\r\n            // Send Email\r\n            let testAccount = await nodemailer.createTestAccount();\r\n            let transporter = nodemailer.createTransport({\r\n                host: \"smtp.ethereal.email\",\r\n                port: 587,\r\n                secure: false,\r\n                auth: {\r\n                    user: testAccount.user,\r\n                    pass: testAccount.pass\r\n                }\r\n            });\r\n            let info = await transporter.sendMail({\r\n                from: '\"Campus Share Tech Support\" <techsupport@campus-share.com>',\r\n                to: this.refs.email,\r\n                subject: \"Password Recovery\",\r\n                text: \"Please follow this link to reset your password:\",\r\n                html: `<a href='${global.thisURL}/resetpassword'></a>`\r\n            });\r\n            console.log(`Message sent: ${info.messageId}`);\r\n            console.log(`Preview URL: ${nodemailer.getTestMessageUrl(info)}`);\r\n        } else {\r\n            this.setState({accountExists: false});\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Please enter your email to recover your password.</p>\r\n                <Form noValidate validated={this.state.accountExists} onSubmit={this.sendEmail}>\r\n                    <Form.Group as={Row} ref=\"email\">\r\n                        <Form.Label column sm={2}>Email</Form.Label>\r\n                        <Col sm={10} md={10} lg={10}>\r\n                            <InputGroup>\r\n                                <Form.Control type=\"text\" placeholder=\"norsekey\" required />\r\n                                    <InputGroup.Append>\r\n                                        <InputGroup.Text id=\"inputGroupAppend\">@luther.edu</InputGroup.Text>\r\n                                    </InputGroup.Append>\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    This account does not exist.\r\n                                </Form.Control.Feedback>\r\n                            </InputGroup>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Recover Password\r\n                    </Button>\r\n                </Form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RecoverPassword;","import React, { Fragment } from 'react';\r\nimport { Button, Form, Row, Modal, Spinner } from 'react-bootstrap';\r\nimport { MDBPopover, MDBPopoverBody, MDBPopoverHeader, MDBBtn, MDBContainer } from \"mdbreact\";\r\n\r\n// Custom imports\r\nimport './Listing.css';\r\n\r\nconst googleAPI = \"https://www.googleapis.com/books/v1/volumes\";\r\n\r\n// Add objects parameter; list of lists (info for InfoCards)\r\nclass Textbooks extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { items: [],\r\n                       bookOptions: [],\r\n                       showModal: false,\r\n                       API_KEY: \"AIzaSyB5xY_lIKmpdwTI50kPz-UYiBDmyiSoc5M\"}\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.fetchBooks = this.fetchBooks.bind(this);\r\n        this.sendRequest = this.sendRequest.bind(this);\r\n    };\r\n\r\n    // componentWillMount \r\n\r\n    componentDidMount = async () => {\r\n        this.fetchBooks();\r\n    };\r\n\r\n    // fetchBooks: retrieves current listings from Textbooks table\r\n    fetchBooks = async() => {\r\n        await fetch(`${global.backendURL}/querytextbooks`)\r\n        .then(response => response.json())\r\n        .then(data => this.setState({ items: data }));\r\n    };\r\n\r\n    // fetchVolumeInfo: on selection of author, populate ISBN & Photo about that volume\r\n    fetchVolumeInfo = async() => {\r\n        let title = this.refs.textbook_title;\r\n        if (title !== \"undefined\" && title.value !== \"\") {\r\n            title = title.value;\r\n            // Get & Display the Volume's ISBN # and Picture\r\n            await fetch(`${googleAPI}?q=${title}&key=${this.state.API_KEY}`)\r\n            .then(response => response.json())\r\n            .then(data => this.setState({ bookOptions: data.items }));\r\n        } else {\r\n            alert(\"Please enter a title before searching Google Books.\")\r\n        }\r\n    };\r\n\r\n    // handleModalShow: shows the Add Listing Modal on button click \r\n    handleModalShow = () => {\r\n        this.setState({showModal: true});\r\n    };\r\n\r\n    // handleModalClose: closes the Add Listing Modal on button click\r\n    handleModalClose = () => {\r\n        this.setState({showModal: false});\r\n    };\r\n\r\n    // handleSubmit: sends book info from Add Listing Modal to DB & refreshes the component\r\n    handleSubmit = async (event) => {\r\n        let title = this.refs.textbook_title;\r\n        // Check that the ref exists and title is not blank\r\n        if (title !== \"undefined\" && title.value !== '') {\r\n            let gbID = this.refs.GoogleBookID;\r\n            // get info on title from Google Books\r\n            console.log(`${googleAPI}/${gbID.value}?key=${this.state.API_KEY}`);\r\n            let gbTitle;\r\n            await fetch(`${googleAPI}/${gbID.value}?key=${this.state.API_KEY}`)\r\n                            .then(response => response.json()\r\n                            .then(data => gbTitle = data));\r\n            let gbVolInfo = gbTitle.volumeInfo;\r\n            console.log(gbVolInfo);\r\n            let gbBookTitle = gbVolInfo.title;\r\n            let gbBookAuthor = gbVolInfo.authors[0]; // There may be multiple authors!\r\n            // let gbBookISBNs = gbVolInfo.industryIentifiers;\r\n            let gbBookISBN = \"XXX-X-XXX-XXXXX-X\";\r\n            // for (let isbnNum in gbBookISBNs) {\r\n            //     if (isbnNum.identifier.type === \"ISBN_13\") {\r\n            //         gbBookISBN = isbnNum.identifier.splice(3, 0, \"-\")\r\n            //     }\r\n            // }\r\n\r\n            let gbBookImage = gbVolInfo.imageLinks.smallThumbnail;\r\n            console.log(`\"${gbBookTitle}\", \"${gbBookAuthor}\", \"${gbBookISBN}\", \"${global.customAuth.email}\", \"${gbBookImage}\"`);\r\n\r\n            // TODO: auto-populate author & ISBN, and grab photo from Google Books API\r\n            // I think we need this to be an async function so we wait for the Promise to see if the data was saved properly.\r\n            let rv = await fetch(`${global.backendURL}/query`, {\r\n                        method: \"POST\",\r\n                        headers: { \"Content-Type\": \"application/json\" },\r\n                        body: JSON.stringify({\r\n                            query: `INSERT INTO Textbooks (book_title, book_author, book_isbn, owner, book_image) VALUES (\"${gbBookTitle}\", \"${gbBookAuthor}\", \"${gbBookISBN}\", \"${global.customAuth.email}\", \"${gbBookImage}\")`,\r\n                        }),\r\n                  }).catch(error => {\r\n                    console.error(error);\r\n                });\r\n            // Change this to alert user if their form was NOT submitted properly.\r\n            if (rv.status !== 200) {\r\n                alert(\"Uff da! Something went wrong, please try again.\")\r\n            } \r\n            // else {\r\n            //     // Response was status 200 - OK  (Data was successfully saved)  \r\n            //     this.handleModalClose();\r\n            //     this.fetchBooks();\r\n            // }\r\n        } else {\r\n            alert('Please provide a valid title.')\r\n        }\r\n    }\r\n\r\n    sendRequest = async (owner, bookID) => {\r\n        if (owner !== global.customAuth.email) {\r\n            let response = await fetch(`${global.backendURL}/query`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    query: `INSERT INTO Notifications (requester_email, offerer_email, item_id, source_table) VALUES (\"${global.customAuth.email}\", \"${owner}\", \"${bookID}\", \"Textbooks\");`,\r\n                })\r\n            })\r\n            if (response.status !== 200) {\r\n                alert(\"Uff da! Something went wrong, please try again.\");\r\n            } else {\r\n                alert(\"Request successfully sent!\")\r\n            }\r\n            console.log(response);\r\n        } else {\r\n            alert(\"You are the owner of this title. Please look for another title.\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <h1 className=\"sectionTitle\">{this.props.sectionTitle}</h1>\r\n                    {global.customAuth.isAuthenticated && (\r\n                        <Button onClick={this.handleModalShow}>Add Listing</Button>\r\n                    )}\r\n                </Row>\r\n                <p className=\"sectionDesc\">Care to share or borrow a book?</p>\r\n                <Row>\r\n                    {typeof this.state.items !== \"undefined\" && (\r\n                        // Retry Row and Col?\r\n                        <MDBContainer>\r\n                            <Row className=\"mdbpopoverDiv\">\r\n                                {this.state.items.map(item =>\r\n                                    <MDBPopover\r\n                                        placement=\"bottom\"\r\n                                        popover\r\n                                        clickable\r\n                                        key={item.book_id}\r\n                                        className=\"mdbpopover\"\r\n                                    >\r\n                                        <MDBBtn className=\"listingBtn\">\r\n                                            <figure className=\"floatLeft\">\r\n                                                <img className=\"listingImg\" src={item.book_image||\"https://cdn0.iconfinder.com/data/icons/reading-5/384/Generic_book_file_type-512.png\"} alt={item.book_title}/>\r\n                                                <figcaption>{item.book_title}</figcaption>\r\n                                            </figure>\r\n                                        </MDBBtn>\r\n                                        <div>\r\n                                            <MDBPopoverHeader>{item.book_title}</MDBPopoverHeader>\r\n                                            <MDBPopoverBody>\r\n                                                <p style={{display:\"none\"}} ref=\"bookID\">{item.book_id}</p>\r\n                                                <p className=\"p\">{item.book_author}</p>\r\n                                                <p className=\"p\">{item.course}</p>\r\n                                                <p className=\"p\">{item.loanPeriod}</p>\r\n                                                <p className=\"p\" ref=\"owner\">{item.owner}</p>\r\n                                                <Button variant=\"success\" size=\"sm\" onClick={() => this.sendRequest(item.owner, item.book_id)}>Request</Button>\r\n                                            </MDBPopoverBody>\r\n                                        </div>\r\n                                    </MDBPopover>\r\n                                    //<InfoCard className=\"infoCard\" image={item.book_image} title={item.book_title} author={item.book_author} course={item.course} loanPeriod={item.book_loan_period}/>\r\n                                )}\r\n                            </Row>\r\n                        </MDBContainer>\r\n                    )}\r\n                    {typeof this.state.items === \"undefined\" && (\r\n                        <Fragment>\r\n                            &nbsp;\r\n                            <Spinner animation=\"border\" size=\"md\"/>\r\n                            &nbsp;Loading...\r\n                        </Fragment>\r\n                    )}\r\n                </Row>\r\n\r\n                {/* Add Title Modal */}\r\n                <Modal show={this.state.showModal} onHide={this.handleModalClose}>\r\n                    <Modal.Header closeButton>\r\n                        {/* Change to Dropdown of possible listing categories? */}\r\n                        <Modal.Title>Add a listing to {this.props.sectionTitle}</Modal.Title>\r\n                        <Modal.Body>\r\n                            <Form onSubmit={this.handleSubmit}>\r\n                                {/* Refactor for generic listing (not just Textbooks) */}\r\n                                <Form.Label>Title</Form.Label>\r\n                                <Form.Control type=\"text\" ref=\"textbook_title\" placeholder=\"Enter Title Here\" />\r\n                                {/* version 1: click button to search for volume info */}\r\n                                <Button variant=\"outline-secondary\" onClick={this.fetchVolumeInfo}>\r\n                                    Search for Title\r\n                                </Button>\r\n                                {this.state.bookOptions.length > 0 && (\r\n                                    <Form.Group controlId=\"titleSelect\">\r\n                                        <Form.Label>Select title</Form.Label>\r\n                                        <Form.Control ref=\"GoogleBookID\" as=\"select\">\r\n                                            {this.state.bookOptions.map(bookOption =>\r\n                                                // each option's value is the volume's id\r\n                                                <option value={bookOption.id} key={bookOption.id}>Author: {bookOption.volumeInfo.authors}&nbsp;Publisher: {bookOption.volumeInfo.publisher}&nbsp;&copy;{bookOption.volumeInfo.publishedDate}</option>\r\n                                            )}\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                )}\r\n                                {/* TODO: Auto Populate Author */}\r\n                                {/* TODO: Auto Populate ISBN */}\r\n                                {/* TODO: Auto Populate Book Image */}\r\n                                <Button variant=\"success\" type=\"submit\" onClick={this.handleSubmit}>\r\n                                    Submit\r\n                                </Button>\r\n                            </Form>\r\n                        </Modal.Body>\r\n                    </Modal.Header>\r\n\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Textbooks;\r\n","import React, { Fragment } from 'react';\r\nimport { Button, Col, Form, InputGroup, Row, Modal, Spinner } from 'react-bootstrap';\r\nimport { MDBPopover, MDBPopoverBody, MDBPopoverHeader, MDBBtn, MDBContainer } from \"mdbreact\";\r\n\r\nimport './Listing.css';\r\n\r\nclass Misc extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { items: [],\r\n                       bookOptions: [],\r\n                       showModal: false,\r\n                       API_KEY: \"AIzaSyB5xY_lIKmpdwTI50kPz-UYiBDmyiSoc5M\"}\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.fetchItems = this.fetchItems.bind(this);\r\n        this.sendRequest = this.sendRequest.bind(this);\r\n    };\r\n\r\n    componentDidMount = async () => {this.fetchItems()};\r\n\r\n    // fetchItems: retrieves current listings from Misc table\r\n    fetchItems = async() => {\r\n        await fetch(`${global.backendURL}/query`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                query: `SELECT * FROM Misc WHERE owner!=${global.customAuth.email}`\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => console.log(response));\r\n    };\r\n\r\n    // handleModalShow: shows the Add Listing Modal on button click \r\n    handleModalShow = () => {this.setState({showModal: true})};\r\n\r\n    // handleModalClose: closes the Add Listing Modal on button click\r\n    handleModalClose = () => {this.setState({showModal: false});};\r\n\r\n    // handleSubmit: sends info about new listing from Add Listing Modal to DB\r\n    handleSubmit = async (event) => {\r\n        let item_name = this.refs.item_name.value;\r\n        if (item_name !== '') {\r\n            let item_desc = this.refs.item_desc.value;\r\n            let imgURL = \"\";\r\n            let loan_deadline = this.refs.loan_deadline.value;\r\n            let rv = await fetch(`${global.backendURL}/query`, {\r\n                        method: \"POST\",\r\n                        headers: { \"Content-Type\": \"application/json\" },\r\n                        body: JSON.stringify({\r\n                            query: `INSERT INTO Misc (item_name, item_desc, item_img, item_loan_deadline) VALUES (\"${item_name}\", \"${item_desc}\", \"${imgURL}\", \"${loan_deadline}\")`,\r\n                        }),\r\n                  }).catch(error => {\r\n                    console.error(error);\r\n                });\r\n            // Change this to alert user if their form was NOT submitted properly.\r\n            if (rv.status !== 200) {\r\n                alert(\"Uff da! Something went wrong, please try again.\")\r\n            } \r\n            else {\r\n                // Response was status 200 - OK  (Data was successfully saved)  \r\n                this.handleModalClose();\r\n            }\r\n        } else {\r\n            alert('Please provide a name for your offering.')\r\n        }\r\n    }\r\n\r\n    sendRequest = async (owner, bookID) => {\r\n        if (owner !== global.customAuth.email) {\r\n            let rv = await fetch(`${global.backendURL}/query`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    query: `INSERT INTO Notifications (requester_email, offerer_email, item_id) VALUES (\"${global.customAuth.email}\", \"${owner}\", \"${bookID}\");`,\r\n                })\r\n            })\r\n            if (rv.status !== 200) {\r\n                alert(\"Uff da! Something went wrong, please try again.\");\r\n            } else {\r\n                alert(\"Request successfully sent!\")\r\n            }\r\n            console.log(rv);\r\n        } else {\r\n            alert(\"You are the owner of this title. Please look for another title.\")\r\n        }\r\n    }\r\n\r\n    // Render Page\r\n    render() {\r\n\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <h1 className=\"sectionTitle\">Misc Page</h1>\r\n                    {global.customAuth.isAuthenticated && (\r\n                        <Button onClick={this.handleModalShow}>Add Listing</Button>\r\n                    )}\r\n                </Row>\r\n                <p className=\"sectionDesc\">The Island of Misfit Toys, CampusShare-style</p>\r\n                <Row>\r\n                    {typeof this.state.items !== \"undefined\" && (\r\n                        <MDBContainer>\r\n                            <Row className=\"mdbpopoverDiv\">\r\n                                {this.state.items.map(item =>\r\n                                    <MDBPopover\r\n                                        placement=\"bottom\"\r\n                                        popover\r\n                                        clickable\r\n                                        key={item.item_name}\r\n                                        className=\"mdbpopover\"\r\n                                    >\r\n                                        <MDBBtn className=\"listingBtn\">\r\n                                            <figure className=\"floatLeft\">\r\n                                                <img className=\"listingImg\" src={item.item_img||\"https://cdn0.iconfinder.com/data/icons/reading-5/384/Generic_book_file_type-512.png\"} alt={item.book_title}/>\r\n                                                <figcaption>{item.item_name}</figcaption>\r\n                                            </figure>\r\n                                        </MDBBtn>\r\n                                        <div>\r\n                                            <MDBPopoverHeader>{item.item_name}</MDBPopoverHeader>\r\n                                            <MDBPopoverBody>\r\n                                                <p style={{display:\"none\"}} ref=\"itemID\">{item.item_id}</p>\r\n                                                <p className=\"p\">{item.item_desc}</p>\r\n                                                <p className=\"p\">{item.loan_period}</p>\r\n                                                <p className=\"p\" ref=\"owner\">{item.owner}</p>\r\n                                                <Button variant=\"success\" size=\"sm\" onClick={() => this.sendRequest(item.owner, item.item_id)}>Request</Button>\r\n                                            </MDBPopoverBody>\r\n                                        </div>\r\n                                    </MDBPopover>\r\n                                    //<InfoCard className=\"infoCard\" image={item.book_image} title={item.book_title} author={item.book_author} course={item.course} loanPeriod={item.book_loan_period}/>\r\n                                )}\r\n                            </Row>\r\n                        </MDBContainer>\r\n                    )}\r\n                    {typeof this.state.items === \"undefined\" && (\r\n                        <Fragment>\r\n                            &nbsp;\r\n                            <Spinner animation=\"border\" size=\"md\"/>\r\n                            &nbsp;Loading...\r\n                        </Fragment>\r\n                    )}\r\n                </Row>\r\n\r\n                {/* Add Title Modal */}\r\n                <Modal show={this.state.showModal} onHide={this.handleModalClose} size=\"lg\" centered>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add a listing to Misc</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Row>\r\n                                <Col>\r\n                                    <InputGroup>\r\n                                    <InputGroup.Prepend><InputGroup.Text>Item Name</InputGroup.Text></InputGroup.Prepend>\r\n                                        <Form.Control type=\"text\" ref=\"item_name\" placeholder=\"Enter Name Here\" />\r\n                                    </InputGroup>\r\n                                    <Form.Label>Description:</Form.Label>\r\n                                    <Form.Control as=\"textarea\" rows=\"3\" ref=\"item_desc\" placeholder=\"Please describe your item here\" />\r\n                                </Col>\r\n                                <Col>\r\n                                    {/* TODO: Render Image Right Away! (Could be useful for Google Books Search, too!) */}\r\n                                    <p>Image Upload</p>\r\n                                    <input type=\"file\" ref=\"item_image\" accept=\"image/gif, image/jpeg, image/png\" />\r\n                                    {/* Loan Period -- Start Date & Time to End Date & Time? \"Any\" Option? Permanent? */}\r\n                                    <p>Loan Period</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Button variant=\"success\" type=\"submit\" onClick={this.handleSubmit}>\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Misc;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\nimport Image from 'react-bootstrap/Image'\r\nimport \"./Slideshow.css\";\r\n\r\n\r\nfunction ControlledCarousel() {\r\n    const [index, setIndex] = React.useState(0);\r\n    const [direction, setDirection] = React.useState(null);\r\n  \r\n    const handleSelect = (selectedIndex, e) => {\r\n      setIndex(selectedIndex);\r\n      setDirection(e.direction);\r\n    };\r\n  \r\n    return (\r\n      <Carousel activeIndex={index} direction={direction} onSelect={handleSelect}>\r\n        <Carousel.Item>\r\n            <Image className=\"carouselImg\" src=\"https://elasticbeanstalk-us-east-2-875968549276.s3.us-east-2.amazonaws.com/banner1.png\" fluid />\r\n        </Carousel.Item>\r\n        <Carousel.Item>\r\n            <Image className=\"carouselImg\" src=\"https://elasticbeanstalk-us-east-2-875968549276.s3.us-east-2.amazonaws.com/banner_2.png\" fluid />\r\n        </Carousel.Item>\r\n      </Carousel>\r\n    );\r\n  }\r\n\r\nexport default ControlledCarousel;","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n// Custom Imports\r\nimport \"./Home.css\";\r\nimport ControlledCarousel from \"./Slideshow\";\r\n\r\nclass Home extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <ControlledCarousel id=\"slideshow\"/>\r\n                <div className=\"text-center\">\r\n                    <a href=\"/signin\"><Button variant=\"success\">Sign In</Button></a>\r\n                    <a href=\"/createaccount\"><Button variant=\"secondary\">Create Account</Button></a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\n// Use this reference anytime the backend is needed\r\nglobal.backendURL = \"http://campus-share-backend.us-east-2.elasticbeanstalk.com\";\r\nglobal.thisURL = \"http://localhost:3000\";\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/bell.a2e70fa6.png\";","module.exports = __webpack_public_path__ + \"static/media/campushare_logo.2ea92f96.png\";"],"sourceRoot":""}